{"version":3,"sources":["index.js"],"names":["main","express","require","app","html","Promise","fs","request","use","static","__dirname","engine","renderFile","set","EXISTDB","convert","XmlReader","xmlQuery","cachedLastQuery","get","req","res","render","name","query","page","url","error","response","body","send","sortField","direction","indexOf","textSearch","limit","xmlResult","entryID","getEntry","console","log","parseInt","trim","advSearch","getAllPeople","getAllEntriesPaged","getAllEntries","listen","Date","toISOString"],"mappings":"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","file":"index.js","sourcesContent":["var express = require('express');\n\nvar app = express();\n\nvar html = require(\"html\");\n\nvar Promise = require('es6-promise').Promise;\nvar fs = require('fs');\n\nvar request = require(\"request\");\n\n\napp.use(express.static(__dirname + '/domainParserviews'));\n//Store all HTML files in view folder.\napp.use(express.static(__dirname + '/views'));\n//Store all JS and CSS in Scripts folder.\napp.use(express.static(__dirname + '/dist'));\n\napp.use(express.static(__dirname + '/images'));\n\napp.engine('html', require('ejs').renderFile);\napp.set('view engine', 'html');\n\nimport {URL_BASE} from \"./config\"\n\nvar EXISTDB = require(\"./existDB\")\n\nvar convert = require('xml-js');\n\n// var XMLSplitter = require('xml-splitter')\n\n// var $$ = require('xml-selector');\n\nconst XmlReader = require('xml-reader');\nconst xmlQuery = require('xml-query');\n\n\n\nvar cachedLastQuery = [];\n//\n// var xs = new XMLSplitter('/exist:result/entries//entry')\n//\n//     xs.on('data', function(data) {\n//         cachedLastQuery.push(data);\n//\n//     })\n//\n//\n//     xs.on('end', function(counter) {\n//         console.log(counter+' slices !') // counts all the slices ever apparently!.\n//     })\n\n\nasync function main(){\n\n}\nmain();\n\n\napp.get('/api/',function(req,res){\n  res.render('index.html', { name: \"cucu\" });\n});\n\napp.get('/api/staticPage',async function(req,res){\n  if (req.query.page){\n    var url;\n    //console.log(req.query.page)\n\n    switch (req.query.page){\n      case \"home\":\n        url = \"https://raw.githubusercontent.com/rpsoft/SROFrontEnd/master/src/staticPages/home.html\"\n        break;\n      case \"project\":\n        url = \"https://raw.githubusercontent.com/rpsoft/SROFrontEnd/master/src/staticPages/project.html\"\n        break;\n      case \"about\":\n        url = \"https://raw.githubusercontent.com/rpsoft/SROFrontEnd/master/src/staticPages/about.html\"\n        break;\n      default:\n        url = \"https://raw.githubusercontent.com/rpsoft/SROFrontEnd/master/src/staticPages/home.html\"\n    }\n\n    request(url, function(error, response, body) {\n      res.send(body)\n    });\n  }\n});\n\napp.get('/api/data',async function(req,res){\n  if (req.query.query){\n\n     var xmlResult;\n      if ( req.query.sortField ) {\n        if ( !(req.query.direction.indexOf(\"undefined\") > -1) ){\n          xmlResult = await EXISTDB.textSearch(req.query.query,req.query.page,req.query.limit,req.query.sortField,req.query.direction)\n        } else {\n          xmlResult = await EXISTDB.textSearch(req.query.query,req.query.page,req.query.limit,req.query.sortField,\"ascending\")\n        }\n      }else {\n        xmlResult = await EXISTDB.textSearch(req.query.query,req.query.page,req.query.limit)\n      }\n\n     res.send(xmlResult)\n  }\n});\n\napp.get('/api/entry',async function(req,res){\n  if (req.query.entryID){\n     var xmlResult = await EXISTDB.getEntry(req.query.entryID)\n     res.send(xmlResult)\n  }\n});\n\napp.get('/api/advSearch',async function(req,res){\n\n     console.log(req.query)\n     req.query.page = ((parseInt(req.query.page))+\"\").trim()\n     var xmlResult;\n\n     xmlResult = await EXISTDB.advSearch(req.query)\n\n     res.send(xmlResult)\n\n     req.query.page = ((parseInt(req.query.page)+1)+\"\").trim() //This one is to buffer the next page :)\n     console.log(req.query)\n     xmlResult = await EXISTDB.advSearch(req.query)\n\n     req.query.page = ((parseInt(req.query.page)-2)+\"\").trim() //This one is to buffer the previous page :)\n     console.log(req.query)\n     if ( parseInt(req.query.page) > 0){\n       xmlResult = await EXISTDB.advSearch(req.query)\n     }\n});\n\napp.get('/api/allPeople',async function(req,res){\n    var xmlResult = await EXISTDB.getAllPeople()\n    res.send(xmlResult)\n});\n\n// app.get('/allEntries',async function(req,res){\n//\n//\n//   var xmlResult = await EXISTDB.getAllEntries()\n//\n//   const ast = XmlReader.parseSync(xmlResult);\n//\n//   const xq = xmlQuery(ast);\n//\n//   //xmlQuery(ast).children().children().each(node => console.log(node.text()));\n//   xmlQuery(ast).children().children().each(node => console.log(\"ENTRY:: \"+xmlQuery(node).text()))\n//\n//\n//   // cachedLastQuery =[];\n//   // xs.parseString(xmlResult);\n//   // cachedLastQuery.map(function (item,i) {\n//   //\n//   //   console.log(item.div)\n//   //\n//   // })\n//   // console.log(cachedLastQuery)\n//\n//   res.send(xmlResult)\n//\n// });\n\napp.get('/api/allEntriesPaged',async function(req,res){\n  console.log(req.query.page)\n  if (req.query.page){\n    var xmlResult\n\n    var xmlResult;\n     if ( req.query.sortField ) {\n       if ( !(req.query.direction.indexOf(\"undefined\") > -1) ){\n         xmlResult = await EXISTDB.getAllEntriesPaged(req.query.page,req.query.limit,req.query.sortField,req.query.direction)\n       } else {\n         xmlResult = await EXISTDB.getAllEntriesPaged(req.query.page,req.query.limit,req.query.sortField,\"ascending\")\n       }\n     }else {\n       xmlResult = await EXISTDB.getAllEntriesPaged(req.query.page,req.query.limit)\n     }\n\n    res.send(xmlResult)\n\n\n\n\n    // console.log(xmlResult)\n     res.send(xmlResult)\n  }\n});\n\napp.get('/api/allEntries',async function(req,res){\n\n\n  var xmlResult = await EXISTDB.getAllEntries()\n\n  // const ast = XmlReader.parseSync(xmlResult);\n  //\n  // const xq = xmlQuery(ast);\n  //\n  // //xmlQuery(ast).children().children().each(node => console.log(node.text()));\n  // xmlQuery(ast).children().children().each(node => console.log(\"ENTRY:: \"+xmlQuery(node).text()))\n\n    // res.send(convert.xml2json(xmlResult, {compact: true, spaces: 4}))\n\n    res.send(xmlResult);\n\n\n});\n\n\n// app.get('/users/:userId/books/:bookId', function (req, res) {\n//   res.send(req.params)\n// })\n\napp.listen(6541, function () {\n  console.log('Application Running on port 6541 ' + new Date().toISOString());\n});\n\n\n//\n// function getUrl(message){\n//   if ( message == undefined) {return \"\"};\n//   var expression = /[-a-zA-Z0-9@:%_\\+.~#?&//=]{2,256}\\.[a-z]{2,4}\\b(\\/[-a-zA-Z0-9@:%_\\+.~#?&//=]*)?/gi;\n//   var regex = new RegExp(expression);\n//   var t = message;\n//\n//   var result = t.match(regex);\n//   if (result)\n//   {\n//     return result[0].toString();\n//   } else {\n//     return \"\";\n//   }\n// }\n"]}