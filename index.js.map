{"version":3,"sources":["index.js"],"names":["console","log","EXISTDB","testExist","res","parser","xml2js","Parser","parseString","err","result","dir","main","express","require","app","html","sync","Promise","fs","use","static","__dirname","engine","renderFile","set","get","req","render","data","xmlResult","send","listen","Date","toISOString","getUrl","message","undefined","expression","regex","RegExp","t","match","toString"],"mappings":";;;;;;;;;;;;;;;wEA+BA;AAAA;AAAA;AAAA;AAAA;AAAA;AACEA,oBAAQC,GAAR,CAAYC,OAAZ;AADF;AAAA,mBAEkBA,QAAQC,SAAR,EAFlB;;AAAA;AAEMC,eAFN;;AAGEJ,oBAAQC,GAAR,CAAYG,GAAZ;;AAGIC,kBANN,GAMe,IAAIC,OAAOC,MAAX,EANf;;;AAQEF,mBAAOG,WAAP,CAAmBJ,GAAnB,EAAwB,UAAUK,GAAV,EAAeC,MAAf,EAAuB;AACvCV,sBAAQW,GAAR,CAAYD,MAAZ;AACAV,sBAAQC,GAAR,CAAY,MAAZ;AACAD,sBAAQC,GAAR,CAAY,yBAAeS,MAAf,CAAZ;AACH,aAJL;;AARF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeE,I;;;;;AATf;;;;AAtBA,IAAIC,UAAUC,QAAQ,SAAR,CAAd;;AAEA,IAAIC,MAAMF,SAAV;;AAEA,IAAIG,OAAOF,QAAQ,MAAR,CAAX;;AAEA,IAAIG,OAAOH,QAAQ,aAAR,CAAX;;AAEA,IAAII,UAAUJ,QAAQ,aAAR,EAAuBI,OAArC;AACA,IAAIC,KAAKL,QAAQ,IAAR,CAAT;;AAEAC,IAAIK,GAAJ,CAAQP,QAAQQ,MAAR,CAAeC,YAAY,oBAA3B,CAAR;AACA;AACAP,IAAIK,GAAJ,CAAQP,QAAQQ,MAAR,CAAeC,YAAY,QAA3B,CAAR;AACA;AACAP,IAAIK,GAAJ,CAAQP,QAAQQ,MAAR,CAAeC,YAAY,OAA3B,CAAR;;AAEAP,IAAIK,GAAJ,CAAQP,QAAQQ,MAAR,CAAeC,YAAY,SAA3B,CAAR;;AAEAP,IAAIQ,MAAJ,CAAW,MAAX,EAAmBT,QAAQ,KAAR,EAAeU,UAAlC;AACAT,IAAIU,GAAJ,CAAQ,aAAR,EAAuB,MAAvB;;AAIA,IAAIvB,UAAUY,QAAQ,WAAR,CAAd;;AAEA,IAAIR,SAASQ,QAAQ,QAAR,CAAb;;AAoBAF;;AAGAG,IAAIW,GAAJ,CAAQ,GAAR,EAAY,UAASC,GAAT,EAAavB,GAAb,EAAiB;AAC3B;AACAA,MAAIwB,MAAJ,CAAW,YAAX,EAAyB,EAAEC,MAAM,EAAR,EAAzB;AACA;AACD,CAJD;;AAMAd,IAAIW,GAAJ,CAAQ,OAAR;AAAA,yEAAgB,kBAAeC,GAAf,EAAmBvB,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAGQF,QAAQC,SAAR,EAHR;;AAAA;AAGV2B,qBAHU;;;AAKd1B,gBAAI2B,IAAJ,CAASD,SAAT;;AAEA;AACA;;AARc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhB;;AAAA;AAAA;AAAA;AAAA;;AAWAf,IAAIiB,MAAJ,CAAW,IAAX,EAAiB,YAAY;AAC3BhC,UAAQC,GAAR,CAAY,sCAAsC,IAAIgC,IAAJ,GAAWC,WAAX,EAAlD;AACD,CAFD;;AAMA,SAASC,MAAT,CAAgBC,OAAhB,EAAwB;AACtB,MAAKA,WAAWC,SAAhB,EAA2B;AAAC,WAAO,EAAP;AAAU;AACtC,MAAIC,aAAa,mFAAjB;AACA,MAAIC,QAAQ,IAAIC,MAAJ,CAAWF,UAAX,CAAZ;AACA,MAAIG,IAAIL,OAAR;;AAEA,MAAI1B,SAAS+B,EAAEC,KAAF,CAAQH,KAAR,CAAb;AACA,MAAI7B,MAAJ,EACA;AACE,WAAOA,OAAO,CAAP,EAAUiC,QAAV,EAAP;AACD,GAHD,MAGO;AACL,WAAO,EAAP;AACD;AACF","file":"index.js","sourcesContent":["var express = require('express');\n\nvar app = express();\n\nvar html = require(\"html\");\n\nvar sync = require('synchronize');\n\nvar Promise = require('es6-promise').Promise;\nvar fs = require('fs');\n\napp.use(express.static(__dirname + '/domainParserviews'));\n//Store all HTML files in view folder.\napp.use(express.static(__dirname + '/views'));\n//Store all JS and CSS in Scripts folder.\napp.use(express.static(__dirname + '/dist'));\n\napp.use(express.static(__dirname + '/images'));\n\napp.engine('html', require('ejs').renderFile);\napp.set('view engine', 'html');\n\nimport {URL_BASE} from \"./config\"\n\nvar EXISTDB = require(\"./existDB\")\n\nvar xml2js = require('xml2js');\n\n\n\n\nasync function main(){\n  console.log(EXISTDB)\n  var res = await EXISTDB.testExist()\n  console.log(res)\n\n\n  var parser = new xml2js.Parser();\n\n  parser.parseString(res, function (err, result) {\n          console.dir(result);\n          console.log('Done');\n          console.log(JSON.stringify(result))\n      });\n\n}\nmain();\n\n\napp.get('/',function(req,res){\n  //console.log(\"EPALE!\"+JSON.stringify(req));\n  res.render('index.html', { data: \"\" });\n  //__dirname : It will resolve to your project folder.\n});\n\napp.get('/data',async function(req,res){\n  //console.log(\"EPALE!\"+JSON.stringify(req));\n\n  var xmlResult = await EXISTDB.testExist()\n\n  res.send(xmlResult)\n\n  // res.json({\"data\":\"goes in here\"});\n  //__dirname : It will resolve to your project folder.\n});\n\napp.listen(6541, function () {\n  console.log('Application Running on port 6541 ' + new Date().toISOString());\n});\n\n\n\nfunction getUrl(message){\n  if ( message == undefined) {return \"\"};\n  var expression = /[-a-zA-Z0-9@:%_\\+.~#?&//=]{2,256}\\.[a-z]{2,4}\\b(\\/[-a-zA-Z0-9@:%_\\+.~#?&//=]*)?/gi;\n  var regex = new RegExp(expression);\n  var t = message;\n\n  var result = t.match(regex);\n  if (result)\n  {\n    return result[0].toString();\n  } else {\n    return \"\";\n  }\n}\n"]}