{"version":3,"sources":["index.js"],"names":["main","express","require","app","html","sync","Promise","fs","use","static","__dirname","engine","renderFile","set","EXISTDB","xml2js","get","req","res","render","data","xmlResult","query","testExist","send","listen","console","log","Date","toISOString","getUrl","message","undefined","expression","regex","RegExp","t","result","match","toString"],"mappings":";;;;;;;;;;;wEA+BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeA,I;;;;;AATf;;;;AAtBA,IAAIC,UAAUC,QAAQ,SAAR,CAAd;;AAEA,IAAIC,MAAMF,SAAV;;AAEA,IAAIG,OAAOF,QAAQ,MAAR,CAAX;;AAEA,IAAIG,OAAOH,QAAQ,aAAR,CAAX;;AAEA,IAAII,UAAUJ,QAAQ,aAAR,EAAuBI,OAArC;AACA,IAAIC,KAAKL,QAAQ,IAAR,CAAT;;AAEAC,IAAIK,GAAJ,CAAQP,QAAQQ,MAAR,CAAeC,YAAY,oBAA3B,CAAR;AACA;AACAP,IAAIK,GAAJ,CAAQP,QAAQQ,MAAR,CAAeC,YAAY,QAA3B,CAAR;AACA;AACAP,IAAIK,GAAJ,CAAQP,QAAQQ,MAAR,CAAeC,YAAY,OAA3B,CAAR;;AAEAP,IAAIK,GAAJ,CAAQP,QAAQQ,MAAR,CAAeC,YAAY,SAA3B,CAAR;;AAEAP,IAAIQ,MAAJ,CAAW,MAAX,EAAmBT,QAAQ,KAAR,EAAeU,UAAlC;AACAT,IAAIU,GAAJ,CAAQ,aAAR,EAAuB,MAAvB;;AAIA,IAAIC,UAAUZ,QAAQ,WAAR,CAAd;;AAEA,IAAIa,SAASb,QAAQ,QAAR,CAAb;;AAaAF;;AAGAG,IAAIa,GAAJ,CAAQ,GAAR,EAAY,UAASC,GAAT,EAAaC,GAAb,EAAiB;AAC3B;AACAA,MAAIC,MAAJ,CAAW,YAAX,EAAyB,EAAEC,MAAM,EAAR,EAAzB;AACA;AACD,CAJD;;AAMAjB,IAAIa,GAAJ,CAAQ,OAAR;AAAA,yEAAgB,kBAAeC,GAAf,EAAmBC,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AACd;AACIG,qBAFU,GAEE,0BAFF;;AAAA,iBAGVJ,IAAIK,KAAJ,CAAUA,KAHA;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAIOR,QAAQS,SAAR,CAAkBN,IAAIK,KAAJ,CAAUA,KAA5B,CAJP;;AAAA;AAIXD,qBAJW;;AAAA;AAMdH,gBAAIM,IAAJ,CAASH,SAAT;;AAEA;AACA;;AATc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhB;;AAAA;AAAA;AAAA;AAAA;;AAYAlB,IAAIsB,MAAJ,CAAW,IAAX,EAAiB,YAAY;AAC3BC,UAAQC,GAAR,CAAY,sCAAsC,IAAIC,IAAJ,GAAWC,WAAX,EAAlD;AACD,CAFD;;AAMA,SAASC,MAAT,CAAgBC,OAAhB,EAAwB;AACtB,MAAKA,WAAWC,SAAhB,EAA2B;AAAC,WAAO,EAAP;AAAU;AACtC,MAAIC,aAAa,mFAAjB;AACA,MAAIC,QAAQ,IAAIC,MAAJ,CAAWF,UAAX,CAAZ;AACA,MAAIG,IAAIL,OAAR;;AAEA,MAAIM,SAASD,EAAEE,KAAF,CAAQJ,KAAR,CAAb;AACA,MAAIG,MAAJ,EACA;AACE,WAAOA,OAAO,CAAP,EAAUE,QAAV,EAAP;AACD,GAHD,MAGO;AACL,WAAO,EAAP;AACD;AACF","file":"index.js","sourcesContent":["var express = require('express');\n\nvar app = express();\n\nvar html = require(\"html\");\n\nvar sync = require('synchronize');\n\nvar Promise = require('es6-promise').Promise;\nvar fs = require('fs');\n\napp.use(express.static(__dirname + '/domainParserviews'));\n//Store all HTML files in view folder.\napp.use(express.static(__dirname + '/views'));\n//Store all JS and CSS in Scripts folder.\napp.use(express.static(__dirname + '/dist'));\n\napp.use(express.static(__dirname + '/images'));\n\napp.engine('html', require('ejs').renderFile);\napp.set('view engine', 'html');\n\nimport {URL_BASE} from \"./config\"\n\nvar EXISTDB = require(\"./existDB\")\n\nvar xml2js = require('xml2js');\n\n\n\n\nasync function main(){\n  // console.log(EXISTDB)\n  // var res = await EXISTDB.testExist(\"Butter\")\n  // console.log(res)\n\n\n\n}\nmain();\n\n\napp.get('/',function(req,res){\n  //console.log(\"EPALE!\"+JSON.stringify(req));\n  res.render('index.html', { data: \"\" });\n  //__dirname : It will resolve to your project folder.\n});\n\napp.get('/data',async function(req,res){\n  //console.log(\"EPALE!\"+JSON.stringify(req));\n  var xmlResult = \"<div>invalid query</div>\"\n  if (req.query.query){\n     xmlResult = await EXISTDB.testExist(req.query.query)\n  }\n  res.send(xmlResult)\n\n  // res.json({\"data\":\"goes in here\"});\n  //__dirname : It will resolve to your project folder.\n});\n\napp.listen(6541, function () {\n  console.log('Application Running on port 6541 ' + new Date().toISOString());\n});\n\n\n\nfunction getUrl(message){\n  if ( message == undefined) {return \"\"};\n  var expression = /[-a-zA-Z0-9@:%_\\+.~#?&//=]{2,256}\\.[a-z]{2,4}\\b(\\/[-a-zA-Z0-9@:%_\\+.~#?&//=]*)?/gi;\n  var regex = new RegExp(expression);\n  var t = message;\n\n  var result = t.match(regex);\n  if (result)\n  {\n    return result[0].toString();\n  } else {\n    return \"\";\n  }\n}\n"]}