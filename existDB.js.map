{"version":3,"sources":["existDB.js"],"names":["q","console","log","filters","query","limit","page","person","toLowerCase","minFees","maxFees","post_query","sortField","translateOrderingField","orderField","trim","direction","Resolve","Reject","db","wrap","then","result","error","advSearch","textSearch","getAllEntriesOrdered","executeStoredQuery","getAllPeople","getAllEntries","entryID","getEntry","catch","rejected","getAllEntriesPaged","exist","require","DB","username","password","xmlField"],"mappings":"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","file":"existDB.js","sourcesContent":["var exist = require('easy-exist');\n\nimport {EDB_LOGIN} from \"./config\"\n\n// connect\nvar db = new exist.DB('http://localhost:8080', {\n    username: EDB_LOGIN.username,\n    password: EDB_LOGIN.password,\n});\n\n\nfunction translateOrderingField(sortField){\n  var xmlField = \"\"\n  switch (sortField){\n        case 'id':\n         xmlField = '@xml:id'\n         break;\n        case 'date':\n         xmlField = 'date//text()[last()]'\n         break;\n        default:\n         xmlField = '@xml:id'\n      }\n      return xmlField;\n}\n\n\nexport async function advSearch(q){\n  //  args, page, limit, orderField, direction\n    console.log(JSON.stringify(q))\n\n    var filters = q.filters\n\n    console.log(filters)\n    //{\"query\":\"william\",\"person\":\"gfdgfd\",\"copies\":\"fsdfds\",\"minDate\":\"-14999130000000\",\"maxDate\":\"1000335600000\",\"minFees\":\"32\",\"maxFees\":\"32\",\"entry\":\"fdsafdsarew\",\"page\":\"1\",\"limit\":\"20\",\"sortField\":\"@xml:id\",\"direction\":\"ascending\"}\n\n\n\n    var query  = 'xquery version \"3.1\"; declare default element namespace \"http://www.tei-c.org/ns/1.0\"; declare namespace tei=\"http://www.tei-c.org/ns/1.0\"; declare namespace array=\"http://www.w3.org/2005/xpath-functions/array\"; declare function local:filter($node as node(), $mode as xs:string) as xs:string? { if ($mode eq \"before\") then concat($node, \" \") else concat(\" \", $node) }; import module namespace kwic=\"http://exist-db.org/xquery/kwic\";'\n    +' let $pageLimit as xs:decimal := '+q.limit+' let $page as xs:decimal := '+q.page+' let $allResults := array { for $hit in collection(\"/db/SRO\")//tei:div'\n    + (q.query ? '[ft:query(., \"'+q.query+'\")]' : '')\n    +' let $score as xs:float := ft:score($hit) let $people := for $pers in $hit//persName return <person> <role>{data($pers/@role)}</role> <name> <title> {normalize-space($pers/text()[last()])} </title> <forename>{$pers/forename/text()}</forename> <surname>{$pers/surname/text()}</surname> </name> </person> where $hit/@type=\"entry\" '\n\n    //personName\n    + (q.person ? ' and contains(lower-case(string-join($people//text(),\"\")), \"'+q.person.toLowerCase()+'\")' : '')\n\n    //copies\n\n    //minDate\n\n    //maxDate\n\n    //minFees\n    + (q.minFees ? ' and data($hit//num[@type=\"totalPence\"]/@value) >= '+q.minFees+' ' : '')\n    //maxFees\n    + (q.maxFees ? ' and data($hit//num[@type=\"totalPence\"]/@value) <= '+q.maxFees+' ' : '')\n\n    //entry\n\n    // FILTERS\n    \n\n\n\n    var post_query = '  let $expanded := kwic:expand($hit) let $sum := array { for $h in $expanded//exist:match return kwic:get-summary($expanded, $h, <config xmlns=\"\" width=\"40\"/>) } return <entry> <people>{$people}</people> <date>{data($hit//date/@notBefore)}</date> <docid>{data($hit//@xml:id)}</docid> <doc>{$hit}</doc> <sum>{$sum}</sum> </entry> } let $resultsCount as xs:decimal := array:size($allResults) let $maxpage as xs:double := math-ext:ceil($resultsCount div $pageLimit) let $firstEntry := if ( $page > $maxpage ) then ($maxpage * $pageLimit) - ($pageLimit - 1) else ($page * $pageLimit) - ($pageLimit - 1) let $offset := if ( ($firstEntry + $pageLimit) > $resultsCount ) then ($firstEntry + $pageLimit) - $resultsCount else 0 let $pagesToReturn := $pageLimit - $offset return <results> <paging> <current>{$page}</current> <last>{$maxpage}</last> <returned>{$pagesToReturn}</returned> <total>{$resultsCount}</total> </paging> <entries>{array:flatten(array:subarray($allResults, $firstEntry, $pagesToReturn))}</entries> </results> '\n\n    //query = query + ' and contains($people//role/text(), \"enterer\") '\n\n    if ( q.sortField ){\n      query = query + ' order by $hit//'+translateOrderingField(q.orderField).trim()+' '+q.direction+' '\n    } else {\n      query = query + ' order by $score descending '\n    }\n\n    var query = query+post_query\n\n    console.log(query)\n\n    return new Promise( function (Resolve,Reject){\n\n        try{\n          db.query(query,{wrap:\"no\"})\n              .then(function(result) {\n                  //console.log('xQuery result:', result);\n                  Resolve(result)\n                })\n\n        } catch (error){\n           Reject (\"Something failed in the ExistDB Module: \"+error)\n        }\n\n      });\n\n  }\n\nexport async function textSearch(query, page, limit, orderField, direction){\n\n    var query  = 'xquery version \"3.1\"; import module namespace kwic=\"http://exist-db.org/xquery/kwic\"; declare default element namespace \"http://www.tei-c.org/ns/1.0\"; declare namespace tei=\"http://www.tei-c.org/ns/1.0\"; declare namespace array=\"http://www.w3.org/2005/xpath-functions/array\"; let $pageLimit as xs:decimal := '+limit+' let $page as xs:decimal := '+page+' '\n          +'let $allResults := array { for $hit in collection(\"/db/SRO\")//tei:div[ft:query(., \"'+query+'\")]'\n          +' let $score as xs:float := ft:score($hit) where $hit/@type=\"entry\"'\n\n    var post_query = ' let $sum := kwic:summarize($hit, <config xmlns=\"\" width=\"100\"/>) return <comp><doc>{$hit}</doc><sum>{$sum}</sum></comp> } '\n          +' let $resultsCount as xs:decimal := array:size($allResults) let $maxpage as xs:double := math-ext:ceil($resultsCount div $pageLimit) let $firstEntry := if ( $page > $maxpage ) then ($maxpage * $pageLimit) - ($pageLimit - 1) else ($page * $pageLimit) - ($pageLimit - 1) let $offset := if ( ($firstEntry + $pageLimit) > $resultsCount ) then ($firstEntry + $pageLimit) - $resultsCount else 0 let $pagesToReturn := $pageLimit - $offset return <results> <paging> <current>{$page}</current> <last>{$maxpage}</last> <returned>{$pagesToReturn}</returned> <total>{$resultsCount}</total> </paging> <entries> { for $hita in array:flatten(array:subarray($allResults, $firstEntry, $pagesToReturn)) let $hit := $hita/doc return <entry> <docid>{data($hit//@xml:id)}</docid> <date>{data($hit//date/@notBefore)}</date> <people>{ for $pers in $hit//persName return <person> <role>{data($pers/@role)}</role> <name> <title> {normalize-space($pers/text()[last()])} </title> <forename>{$pers/forename/text()}</forename> <surname>{$pers/surname/text()}</surname> </name> </person> } </people> {$hit} {$hita/sum} </entry> } </entries> </results> '\n\n\n    if ( orderField ){\n      query = query + ' order by $hit//'+orderField.trim()+' '+direction+' '\n    } else {\n      query = query + ' order by $score descending '\n    }\n\n    var query = query+post_query\n\n    console.log(query)\n\n    return new Promise( function (Resolve,Reject){\n\n        try{\n          db.query(query,{wrap:\"no\"})\n              .then(function(result) {\n                  //console.log('xQuery result:', result);\n                  Resolve(result)\n                })\n\n        } catch (error){\n           Reject (\"Something failed in the ExistDB Module: \"+error)\n        }\n\n      });\n\n  }\n\n  export async function getAllEntriesOrdered(){\n\n      var query = 'xquery version \"3.0\";'+\n                  'declare default element namespace \"http://www.tei-c.org/ns/1.0\";'+\n                  'declare namespace tei=\"http://www.tei-c.org/ns/1.0\";'+\n                  '<entries>'+\n                  '{'+\n                  ' for $hit in collection(\"/db/SRO\")//tei:div[@type=\"entry\"]'+\n                  'let $score as xs:float := ft:score($hit) where $hit/@type=\"entry\" order by $score descending return <entry> <docid>{data($hit/@xml:id)}</docid> <score>{data($score)}</score> <date>{data($hit//date)}</date> <stationers>{ for $stat in $hit//persName where $stat/@role=\"stationer\" return <name> {string-join( ($stat/forename,$stat/surname), \", \")} </name> } </stationers> <doc>{ for $item in $hit/p return <item>{fn:string-join($item//text(),\" \")}</item> }</doc> </entry> } </entries>'\n\n      return new Promise( function (Resolve,Reject){\n\n          try{\n            db.query(query,{wrap:\"no\"})\n                .then(function(result) {\n                    //console.log('xQuery result:', result);\n                    Resolve(result)\n                  })\n\n          } catch (error){\n             Reject (\"Something failed in the ExistDB Module: \"+error)\n          }\n\n        });\n\n    }\n\n\n    export async function getAllPeople(){\n\n        return new Promise( function (Resolve,Reject){\n            try{\n              db.executeStoredQuery(\"/QS/allPeople.xq\")\n                  .then(function(result) {\n                      //console.log('xQuery result:', result);\n                      Resolve(result)\n                    })\n\n            } catch (error){\n               Reject (\"Something failed in the ExistDB Module: \"+error)\n            }\n          });\n      }\n\n    export async function getAllEntries(){\n\n        return new Promise( function (Resolve,Reject){\n            try{\n              db.executeStoredQuery(\"/QS/allEntries.xq\")\n                  .then(function(result) {\n                      Resolve(result)\n                    })\n\n            } catch (error){\n               Reject (\"Something failed in the ExistDB Module: \"+error)\n            }\n\n          });\n\n      }\n\n      export async function getEntry(entryID){\n        var query = 'xquery version \"3.1\"; declare default element namespace \"http://www.tei-c.org/ns/1.0\"; declare namespace tei=\"http://www.tei-c.org/ns/1.0\"; for $coll in collection(\"/db/SRO\") for $hit in $coll//tei:div[@type=\"entry\"] where $hit/@xml:id = \"'+entryID+'\" return $hit';\n        console.log(query);\n\n        return new Promise( function (Resolve,Reject){\n\n            try{\n              db.query(query,{wrap:\"no\"})\n                  .then(function(result) {\n                      //console.log('xQuery result:', result);\n                      Resolve(result)\n                    })\n\n            } catch (error){\n               Reject (\"Something failed in the ExistDB Module: \"+error)\n            }\n\n          });\n\n        }\n\n      export async function getAllEntriesPaged(page,limit){\n\n        var query = 'xquery version \"3.1\"; declare default element namespace \"http://www.tei-c.org/ns/1.0\"; declare namespace tei=\"http://www.tei-c.org/ns/1.0\"; declare namespace array=\"http://www.w3.org/2005/xpath-functions/array\"; let $pageLimit as xs:decimal := '+limit+' let $page as xs:decimal := '+page+' let $allResults := array { for $hit in collection(\"/db/SRO\")//tei:div where $hit/@type=\"entry\" return <comp><doc>{$hit}</doc></comp> } let $resultsCount as xs:decimal := array:size($allResults) let $maxpage as xs:double := math-ext:ceil($resultsCount div $pageLimit) let $firstEntry := if ( $page > $maxpage ) then ($maxpage * $pageLimit) - ($pageLimit - 1) else ($page * $pageLimit) - ($pageLimit - 1) let $offset := if ( ($firstEntry + $pageLimit) > $resultsCount ) then ($firstEntry + $pageLimit) - $resultsCount else 0 let $pagesToReturn := $pageLimit - $offset return <results> <paging> <current>{$page}</current> <last>{$maxpage}</last> <returned>{$pagesToReturn}</returned> <total>{$resultsCount}</total> </paging> <entries> { for $hita in array:flatten(array:subarray($allResults, $firstEntry, $pagesToReturn)) let $hit := $hita/doc return <entry> <docid>{data($hit//@xml:id)}</docid> <date>{data($hit//date/@notBefore)}</date> <people>{ for $pers in $hit//persName return <person> <role>{data($pers/@role)}</role> <name> <title> {normalize-space($pers/text()[last()])} </title> <forename>{$pers/forename/text()}</forename> <surname>{$pers/surname/text()}</surname> </name> </person> } </people> {$hit} </entry> } </entries> </results>';\n\n        console.log(query);\n\n        return new Promise( function (Resolve,Reject){\n\n            try{\n              db.query(query,{wrap:\"no\"})\n                  .then(function(result) {\n                      //console.log('xQuery result:', result);\n                      Resolve(result)\n                    }).catch(function (rejected){\n                      console.log(rejected)\n                    })\n\n            } catch (error){\n               Reject (\"Something failed in the ExistDB Module: \"+error)\n            }\n\n          });\n        }\n\n\n\n// USAGE EXAMPLE OF THE EASY-EXIST MODULE\n\n// PUT a document\n// db.put('/my-collection/my-document', body)\n//\n//     // Get the body of a document\n//     .then(function() {\n//         return db.get('/my-collection/my-document');\n//     })\n//     .then(function(doc) {\n//         console.log('Document Body:', doc);\n//     })\n//\n//     // Execute xQuery\n//     .then(function() {\n//         return db.query('collection(\"my-collection\")/message/body');\n//     })\n//     .then(function(result) {\n//         console.log('xQuery result:', result);\n//     })\n//\n//     // Delete document\n//     .then(function() {\n//         return db.delete('/my-collection/my-document');\n//     })\n//     .then(function() {\n//         console.log('Document Deleted');\n//     });\n//\n"]}