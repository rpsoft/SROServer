{"version":3,"sources":["existDB.js"],"names":["q","queryString","cachedResult","simpleSearchCache","console","log","filters","eval","dateFiltersArray","volumeFiltersArray","entryTypeFiltersArray","entererRoleFiltersArray","f","filterKey","split","filterValue","minDate","maxDate","push","dateFiltersString","mergeFilter","volumeFilterString","entryTypeFilterString","entererRoleFilterString","query","limit","page","person","map","v","i","toLowerCase","join","minFees","maxFees","entry","post_query","sortField","translateOrderingField","trim","direction","Resolve","Reject","db","wrap","then","result","cachedQueries","length","maxCacheElements","shift","cacheError","error","advSearch","orderField","textSearch","getAllEntriesOrdered","executeStoredQuery","getAllPeople","getAllEntries","entryID","getEntry","catch","rejected","getAllEntriesPaged","exist","require","DB","username","password","xmlField","filterArray","filterString"],"mappings":"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","file":"existDB.js","sourcesContent":["var exist = require('easy-exist');\n\nimport {EDB_LOGIN} from \"./config\"\n\nvar simpleSearchCache = {}\nvar cachedQueries = []\nvar maxCacheElements = 40\n\n// connect\nvar db = new exist.DB('http://localhost:8080', {\n    username: EDB_LOGIN.username,\n    password: EDB_LOGIN.password,\n});\n\n\nfunction translateOrderingField(sortField){\n  var xmlField = \"\"\n\n  switch (sortField){\n        case 'id':\n        // console.log(\"USE EL ID\");\n         xmlField = '$hit//@xml:id'\n         break;\n        case 'date':\n        // console.log(\"USE EL DATE\");\n         xmlField = 'xs:decimal($hit//idno[@type=\"SRONumber\"])'\n         break;\n        default:\n        // console.log(\"USE EL DEFAULT\");\n         xmlField = '$hit//@xml:id'\n      }\n      return xmlField;\n}\n\nfunction mergeFilter(filterArray){\n    var filterString = \"\"\n    if ( filterArray.length > 0 ) {\n\n      filterString = \"and ( \"+ filterArray.join(\" or \") +\" ) \"\n\n    }\n    return filterString;\n}\n\nexport async function advSearch(q){\n  //  args, page, limit, orderField, direction\n\n    // Caching system\n    var queryString = JSON.stringify(q)\n    var cachedResult = simpleSearchCache[queryString];\n    if ( cachedResult ){\n      console.log(\"USING CACHED search for: \"+queryString)\n      return cachedResult\n    }\n    // End caching system.\n\n    var filters = eval(q.filters)\n\n    console.log(filters)\n    //{\"query\":\"william\",\"person\":\"gfdgfd\",\"copies\":\"fsdfds\",\"minDate\":\"-14999130000000\",\"maxDate\":\"1000335600000\",\"minFees\":\"32\",\"maxFees\":\"32\",\"entry\":\"fdsafdsarew\",\"page\":\"1\",\"limit\":\"20\",\"sortField\":\"@xml:id\",\"direction\":\"ascending\"}\n\n    var dateFiltersArray = [];\n\n    var volumeFiltersArray = [];\n\n    var entryTypeFiltersArray = [];\n\n    var entererRoleFiltersArray = [];\n\n    for ( var f in filters ){\n\n      var filterKey = filters[f].split(\"_\")[0]\n      var filterValue  = filters[f].split(\"_\")[1]\n\n      switch ( filterKey ){\n        case \"date\":\n            var minDate = filterValue.split(\"-\")[0]+\"-01-01\"\n            var maxDate = filterValue.split(\"-\")[1]+\"-12-31\"\n\n            dateFiltersArray.push (\"($currentDate >= xs:date('\"+minDate+\"') and $currentDate <= xs:date('\"+maxDate+\"'))\")\n            break;\n        case \"volume\":\n            switch (filterValue) {\n              case \"A\":\n                  volumeFiltersArray.push(\"($hit//idno[@type='SRONumber'] < 1265)\")\n                break;\n              case \"B\":\n                  volumeFiltersArray.push(\"(($hit//idno[@type='SRONumber'] > 1264) and ($hit//idno[@type='SRONumber'] < 3635))\")\n                break;\n              case \"C\":\n                  volumeFiltersArray.push(\"($hit//idno[@type='SRONumber'] > 3634)\")\n                break;\n            }\n\n        case \"entryType\":\n            switch (filterValue) {\n              case \"Entered\":\n                  entryTypeFiltersArray.push(\"($enteredNotes > 0)\")\n                break;\n              case \"Stock\":\n                  entryTypeFiltersArray.push(\"($stockNotes > 0)\")\n                break;\n            }\n        case \"entererRole\":\n            switch(filterValue) {\n              case \"Stationer\":\n                entererRoleFiltersArray.push(\"$isStationer\")\n                break;\n              case \"Non-Stationer\":\n                entererRoleFiltersArray.push(\"not($isStationer )\")\n                break;\n            }\n\n\n      }\n    }\n\n    // console.log(dateFiltersArray.join(\" or \"))\n    var dateFiltersString = mergeFilter(dateFiltersArray)\n    var volumeFilterString = mergeFilter(volumeFiltersArray)\n    var entryTypeFilterString = mergeFilter(entryTypeFiltersArray)\n    var entererRoleFilterString = mergeFilter(entererRoleFiltersArray)\n\n    // console.log(\"DDDA: \"+dateFiltersString)\n    // console.log(\"DDDASS: \"+JSON.stringify(dateFiltersArray))\n    // console.log(\"Q::: \"+JSON.stringify(q))\n    var query  = 'xquery version \"3.1\"; declare default element namespace \"http://www.tei-c.org/ns/1.0\"; declare namespace tei=\"http://www.tei-c.org/ns/1.0\"; declare namespace array=\"http://www.w3.org/2005/xpath-functions/array\"; declare function local:filter($node as node(), $mode as xs:string) as xs:string? { if ($mode eq \"before\") then concat($node, \" \") else concat(\" \", $node) }; import module namespace kwic=\"http://exist-db.org/xquery/kwic\";'\n    +' let $pageLimit as xs:decimal := '+q.limit+' let $page as xs:decimal := '+q.page+' let $allResults := array { for $hit in collection(\"/db/SRO\")//tei:div'\n    + (q.query ? \"[ft:query(., '\"+q.query+\"')]\" : '')\n    +' let $score as xs:float := ft:score($hit) let $currentDate as xs:date := xs:date( data($hit//ab[@type=\"metadata\"]/date[@type=\"SortDate\"]/@when) ) '\n    +' let $stockNotes := count($hit//note[@subtype=\"stock\"]) let $enteredNotes := count($hit//note[@subtype=\"entered\"])'\n    +' let $isStationer := contains(data($hit//persName[contains(@role, \"enterer\")]/@role),\"stationer\")'\n    +' let $people := for $pers in $hit//persName return <person> <role>{data($pers/@role)}</role> <name> <title> {normalize-space($pers/text()[last()])} </title> <forename>{$pers/forename/text()}</forename> <surname>{$pers/surname/text()}</surname> </name> </person> where $hit/@type=\"entry\" '\n\n    //personName\n    //+ (q.person ? ' and contains(lower-case(string-join($people//text(),\"\")), \"'+q.person.toLowerCase()+'\")' : '')\n\n    + (\n      q.person ?\n      q.person.split(\" \").map( (v,i) => v ? ' and (index-of($people/descendant::*/lower-case(text()),\"'+v.toLowerCase()+'\") > 0) ' : \"\" ).join(\"\")\n      : ''\n    )\n\n    //copies\n    + entererRoleFilterString\n    + entryTypeFilterString\n    + volumeFilterString\n\n    //minDate & maxDate\n    + (q.minDate ? \" and ($currentDate >= xs:date('\"+q.minDate+\"') )\" : \"\")\n    + (q.maxDate ? \" and ($currentDate <= xs:date('\"+q.maxDate+\"') )\" : \"\")\n\n    //minDate & maxDate : from filters\n    + dateFiltersString\n\n    //minFees\n    + (q.minFees ? ' and data($hit//num[@type=\"totalPence\"]/@value) >= '+q.minFees+' ' : '')\n    //maxFees\n    + (q.maxFees ? ' and data($hit//num[@type=\"totalPence\"]/@value) <= '+q.maxFees+' ' : '')\n\n    //entry\n    + (q.entry ? ' and $hit//idno[@type=\"SRONumber\"] = \"'+q.entry+ '\"' : '')\n    // FILTERS\n\n\n\n\n    var post_query = '  let $expanded := kwic:expand($hit) let $sum := array { for $h in $expanded//exist:match return kwic:get-summary($expanded, $h, <config xmlns=\"\" width=\"40\"/>) } return <entry> <people>{$people}</people> <date>{ $currentDate }</date> <docid>{data($hit//@xml:id)}</docid> <doc>{$hit}</doc> <sum>{$sum}</sum> </entry> } let $page := if( $page < 1 ) then 1 else $page let $resultsCount as xs:decimal := array:size($allResults) let $firstEntry := (($page - 1)*$pageLimit)+1 let $firstEntry := if( $firstEntry > $resultsCount) then ( if ( ($resultsCount - $pageLimit) < 0) then 1 else $resultsCount - $pageLimit ) else $firstEntry let $maxpage as xs:double := math-ext:ceil($resultsCount div $pageLimit) let $pagesToReturn := if( ($firstEntry + $pageLimit) > $resultsCount ) then ( $pageLimit - ( $firstEntry + $pageLimit -$resultsCount )+1 ) else $pageLimit return <results> <paging> <current>{$page}</current> <returned>{$pagesToReturn}</returned> <total>{$resultsCount}</total> <last>{$maxpage}</last> </paging> <entries>{array:flatten(array:subarray($allResults, $firstEntry, $pagesToReturn))}</entries> </results> ';\n\n    //query = query + ' and contains($people//role/text(), \"enterer\") '\n\n    if ( q.sortField ){\n      query = query + ' order by '+translateOrderingField(q.sortField).trim()+' '+q.direction+' '\n    } else {\n      query = query + ' order by $score descending '\n    }\n\n    var query = query+post_query\n\n    console.log(query)\n\n    return new Promise( function (Resolve,Reject){\n\n        try{\n          db.query(query,{wrap:\"no\"})\n              .then(function(result) {\n                //  console.log('xQuery result:', result);\n\n                  try{ // very crude implementation of a cache. to speed up repeating searches.\n\n                    if( cachedQueries.length > maxCacheElements ){\n                        delete simpleSearchCache[cachedQueries.shift()]\n                    }\n\n                    simpleSearchCache[queryString] = result\n                    cachedQueries.push(queryString)\n\n                  }catch ( cacheError){\n                    console.log(cacheError)\n                  }\n\n\n                  Resolve(result)\n                })\n\n        } catch (error){\n           Reject (\"Something failed in the ExistDB Module: \"+error)\n        }\n\n      });\n\n  }\n\nexport async function textSearch(query, page, limit, orderField, direction){\n\n    var query  = 'xquery version \"3.1\"; import module namespace kwic=\"http://exist-db.org/xquery/kwic\"; declare default element namespace \"http://www.tei-c.org/ns/1.0\"; declare namespace tei=\"http://www.tei-c.org/ns/1.0\"; declare namespace array=\"http://www.w3.org/2005/xpath-functions/array\"; let $pageLimit as xs:decimal := '+limit+' let $page as xs:decimal := '+page+' '\n          +'let $allResults := array { for $hit in collection(\"/db/SRO\")//tei:div[ft:query(., \"'+query+'\")]'\n          +' let $score as xs:float := ft:score($hit) where $hit/@type=\"entry\"'\n\n    var post_query = ' let $sum := kwic:summarize($hit, <config xmlns=\"\" width=\"100\"/>) return <comp><doc>{$hit}</doc><sum>{$sum}</sum></comp> } '\n          +' let $resultsCount as xs:decimal := array:size($allResults) let $maxpage as xs:double := math-ext:ceil($resultsCount div $pageLimit) let $firstEntry := if ( $page > $maxpage ) then ($maxpage * $pageLimit) - ($pageLimit - 1) else ($page * $pageLimit) - ($pageLimit - 1) let $offset := if ( ($firstEntry + $pageLimit) > $resultsCount ) then ($firstEntry + $pageLimit) - $resultsCount else 0 let $pagesToReturn := $pageLimit - $offset return <results> <paging> <current>{$page}</current> <last>{$maxpage}</last> <returned>{$pagesToReturn}</returned> <total>{$resultsCount}</total> </paging> <entries> { for $hita in array:flatten(array:subarray($allResults, $firstEntry, $pagesToReturn)) let $hit := $hita/doc return <entry> <docid>{data($hit//@xml:id)}</docid> <date>{ if (data($hit//ab[@type=\"metadata\"]/date/@when)) then data($hit//ab[@type=\"metadata\"]/date/@when) else data($hit//ab[@type=\"metadata\"]/date/@notBefore) }</date> <people>{ for $pers in $hit//persName return <person> <role>{data($pers/@role)}</role> <name> <title> {normalize-space($pers/text()[last()])} </title> <forename>{$pers/forename/text()}</forename> <surname>{$pers/surname/text()}</surname> </name> </person> } </people> {$hit} {$hita/sum} </entry> } </entries> </results> '\n\n\n    if ( orderField ){\n      query = query + ' order by $hit//'+orderField.trim()+' '+direction+' '\n    } else {\n      query = query + ' order by $score descending '\n    }\n\n    var query = query+post_query\n\n    console.log(query)\n\n    return new Promise( function (Resolve,Reject){\n\n        try{\n          db.query(query,{wrap:\"no\"})\n              .then(function(result) {\n                  //console.log('xQuery result:', result);\n                  Resolve(result)\n                })\n\n        } catch (error){\n           Reject (\"Something failed in the ExistDB Module: \"+error)\n        }\n\n      });\n\n  }\n\n  export async function getAllEntriesOrdered(){\n\n      var query = 'xquery version \"3.0\";'+\n                  'declare default element namespace \"http://www.tei-c.org/ns/1.0\";'+\n                  'declare namespace tei=\"http://www.tei-c.org/ns/1.0\";'+\n                  '<entries>'+\n                  '{'+\n                  ' for $hit in collection(\"/db/SRO\")//tei:div[@type=\"entry\"]'+\n                  'let $score as xs:float := ft:score($hit) where $hit/@type=\"entry\" order by $score descending return <entry> <docid>{data($hit/@xml:id)}</docid> <score>{data($score)}</score> <date>{ if (data($hit//ab[@type=\"metadata\"]/date/@when)) then data($hit//ab[@type=\"metadata\"]/date/@when) else data($hit//ab[@type=\"metadata\"]/date/@notBefore) }</date> <stationers>{ for $stat in $hit//persName where $stat/@role=\"stationer\" return <name> {string-join( ($stat/forename,$stat/surname), \", \")} </name> } </stationers> <doc>{ for $item in $hit/p return <item>{fn:string-join($item//text(),\" \")}</item> }</doc> </entry> } </entries>'\n\n      return new Promise( function (Resolve,Reject){\n\n          try{\n            db.query(query,{wrap:\"no\"})\n                .then(function(result) {\n                    //console.log('xQuery result:', result);\n                    Resolve(result)\n                  })\n\n          } catch (error){\n             Reject (\"Something failed in the ExistDB Module: \"+error)\n          }\n\n        });\n\n    }\n\n\n    export async function getAllPeople(){\n\n        return new Promise( function (Resolve,Reject){\n            try{\n              db.executeStoredQuery(\"/QS/allPeople.xq\")\n                  .then(function(result) {\n                      //console.log('xQuery result:', result);\n                      Resolve(result)\n                    })\n\n            } catch (error){\n               Reject (\"Something failed in the ExistDB Module: \"+error)\n            }\n          });\n      }\n\n    export async function getAllEntries(){\n\n        return new Promise( function (Resolve,Reject){\n            try{\n              db.executeStoredQuery(\"/QS/allEntries.xq\")\n                  .then(function(result) {\n                      Resolve(result)\n                    })\n\n            } catch (error){\n               Reject (\"Something failed in the ExistDB Module: \"+error)\n            }\n\n          });\n\n      }\n\n      export async function getEntry(entryID){\n        var query = 'xquery version \"3.1\"; declare default element namespace \"http://www.tei-c.org/ns/1.0\"; declare namespace tei=\"http://www.tei-c.org/ns/1.0\"; for $coll in collection(\"/db/SRO\") for $hit in $coll//tei:div[@type=\"entry\"] where $hit/@xml:id = \"'+entryID+'\" return $hit';\n        console.log(query);\n\n        return new Promise( function (Resolve,Reject){\n\n            try{\n              db.query(query,{wrap:\"no\"})\n                  .then(function(result) {\n                      //console.log('xQuery result:', result);\n                      Resolve(result)\n                    })\n\n            } catch (error){\n               Reject (\"Something failed in the ExistDB Module: \"+error)\n            }\n\n          });\n\n        }\n\n      export async function getAllEntriesPaged(page,limit){\n\n        var query = 'xquery version \"3.1\"; declare default element namespace \"http://www.tei-c.org/ns/1.0\"; declare namespace tei=\"http://www.tei-c.org/ns/1.0\"; declare namespace array=\"http://www.w3.org/2005/xpath-functions/array\"; let $pageLimit as xs:decimal := '+limit+' let $page as xs:decimal := '+page+' let $allResults := array { for $hit in collection(\"/db/SRO\")//tei:div where $hit/@type=\"entry\" return <comp><doc>{$hit}</doc></comp> } let $resultsCount as xs:decimal := array:size($allResults) let $maxpage as xs:double := math-ext:ceil($resultsCount div $pageLimit) let $firstEntry := if ( $page > $maxpage ) then ($maxpage * $pageLimit) - ($pageLimit - 1) else ($page * $pageLimit) - ($pageLimit - 1) let $offset := if ( ($firstEntry + $pageLimit) > $resultsCount ) then ($firstEntry + $pageLimit) - $resultsCount else 0 let $pagesToReturn := $pageLimit - $offset return <results> <paging> <current>{$page}</current> <last>{$maxpage}</last> <returned>{$pagesToReturn}</returned> <total>{$resultsCount}</total> </paging> <entries> { for $hita in array:flatten(array:subarray($allResults, $firstEntry, $pagesToReturn)) let $hit := $hita/doc return <entry> <docid>{data($hit//@xml:id)}</docid> <date>{ if (data($hit//ab[@type=\"metadata\"]/date/@when)) then data($hit//ab[@type=\"metadata\"]/date/@when) else data($hit//ab[@type=\"metadata\"]/date/@notBefore) }</date> <people>{ for $pers in $hit//persName return <person> <role>{data($pers/@role)}</role> <name> <title> {normalize-space($pers/text()[last()])} </title> <forename>{$pers/forename/text()}</forename> <surname>{$pers/surname/text()}</surname> </name> </person> } </people> {$hit} </entry> } </entries> </results>';\n\n        console.log(query);\n\n        return new Promise( function (Resolve,Reject){\n\n            try{\n              db.query(query,{wrap:\"no\"})\n                  .then(function(result) {\n                      //console.log('xQuery result:', result);\n                      Resolve(result)\n                    }).catch(function (rejected){\n                      console.log(rejected)\n                    })\n\n            } catch (error){\n               Reject (\"Something failed in the ExistDB Module: \"+error)\n            }\n\n          });\n        }\n\n\n\n// USAGE EXAMPLE OF THE EASY-EXIST MODULE\n\n// PUT a document\n// db.put('/my-collection/my-document', body)\n//\n//     // Get the body of a document\n//     .then(function() {\n//         return db.get('/my-collection/my-document');\n//     })\n//     .then(function(doc) {\n//         console.log('Document Body:', doc);\n//     })\n//\n//     // Execute xQuery\n//     .then(function() {\n//         return db.query('collection(\"my-collection\")/message/body');\n//     })\n//     .then(function(result) {\n//         console.log('xQuery result:', result);\n//     })\n//\n//     // Delete document\n//     .then(function() {\n//         return db.delete('/my-collection/my-document');\n//     })\n//     .then(function() {\n//         console.log('Document Deleted');\n//     });\n//\n\n//WASUsPS\n"]}