{"version":3,"sources":["existDB.js"],"names":["q","console","log","filters","eval","dateFiltersArray","volumeFiltersArray","entryTypeFiltersArray","entererRoleFiltersArray","f","filterKey","split","filterValue","minDate","maxDate","push","dateFiltersString","mergeFilter","volumeFilterString","entryTypeFilterString","entererRoleFilterString","query","limit","page","person","toLowerCase","minFees","maxFees","post_query","sortField","translateOrderingField","orderField","trim","direction","Resolve","Reject","db","wrap","then","result","error","advSearch","textSearch","getAllEntriesOrdered","executeStoredQuery","getAllPeople","getAllEntries","entryID","getEntry","catch","rejected","getAllEntriesPaged","exist","require","DB","username","password","xmlField","filterArray","filterString","length","join"],"mappings":"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","file":"existDB.js","sourcesContent":["var exist = require('easy-exist');\n\nimport {EDB_LOGIN} from \"./config\"\n\n// connect\nvar db = new exist.DB('http://localhost:8080', {\n    username: EDB_LOGIN.username,\n    password: EDB_LOGIN.password,\n});\n\n\nfunction translateOrderingField(sortField){\n  var xmlField = \"\"\n  switch (sortField){\n        case 'id':\n         xmlField = '@xml:id'\n         break;\n        case 'date':\n         xmlField = 'date//text()[last()]'\n         break;\n        default:\n         xmlField = '@xml:id'\n      }\n      return xmlField;\n}\n\nfunction mergeFilter(filterArray){\n    var filterString = \"\"\n    if ( filterArray.length > 0 ) {\n\n      filterString = \"and ( \"+ filterArray.join(\" or \") +\" ) \"\n\n    }\n    return filterString;\n}\n\nexport async function advSearch(q){\n  //  args, page, limit, orderField, direction\n    console.log(JSON.stringify(q))\n\n    var filters = eval(q.filters)\n\n    console.log(filters)\n    //{\"query\":\"william\",\"person\":\"gfdgfd\",\"copies\":\"fsdfds\",\"minDate\":\"-14999130000000\",\"maxDate\":\"1000335600000\",\"minFees\":\"32\",\"maxFees\":\"32\",\"entry\":\"fdsafdsarew\",\"page\":\"1\",\"limit\":\"20\",\"sortField\":\"@xml:id\",\"direction\":\"ascending\"}\n\n    var dateFiltersArray = [];\n\n    var volumeFiltersArray = [];\n\n    var entryTypeFiltersArray = [];\n\n    var entererRoleFiltersArray = [];\n\n    for ( var f in filters ){\n\n      var filterKey = filters[f].split(\"_\")[0]\n      var filterValue  = filters[f].split(\"_\")[1]\n\n      switch ( filterKey ){\n        case \"date\":\n            var minDate = filterValue.split(\"-\")[0]+\"-01-01\"\n            var maxDate = filterValue.split(\"-\")[1]+\"-12-31\"\n\n            dateFiltersArray.push (\"($currentDate >= xs:date('\"+minDate+\"') and $currentDate <= xs:date('\"+maxDate+\"'))\")\n            break;\n        case \"volume\":\n            switch (filterValue) {\n              case \"A\":\n                  volumeFiltersArray.push(\"($rawCode < 1265)\")\n                break;\n              case \"B\":\n                  volumeFiltersArray.push(\"(($rawCode > 1264) and ($rawCode < 3635))\")\n                break;\n              case \"C\":\n                  volumeFiltersArray.push(\"($rawCode > 3634)\")\n                break;\n            }\n\n        case \"entryType\":\n            switch (filterValue) {\n              case \"Entered\":\n                  entryTypeFiltersArray.push(\"($enteredNotes > 0)\")\n                break;\n              case \"Stock\":\n                  entryTypeFiltersArray.push(\"($stockNotes > 0)\")\n                break;\n            }\n        case \"entererRole\":\n            switch(filterValue) {\n              case \"Stationer\":\n                entererRoleFiltersArray.push(\"$isStationer\")\n                break;\n              case \"Non-Stationer\":\n                entererRoleFiltersArray.push(\"not($isStationer )\")\n                break;\n            }\n\n\n      }\n    }\n\n    // console.log(dateFiltersArray.join(\" or \"))\n    var dateFiltersString = mergeFilter(dateFiltersArray)\n    var volumeFilterString = mergeFilter(volumeFiltersArray)\n    var entryTypeFilterString = mergeFilter(entryTypeFiltersArray)\n    var entererRoleFilterString = mergeFilter(entererRoleFiltersArray)\n\n    console.log(\"DDDA: \"+dateFiltersString)\n    console.log(\"DDDASS: \"+JSON.stringify(dateFiltersArray))\n\n    var query  = 'xquery version \"3.1\"; declare default element namespace \"http://www.tei-c.org/ns/1.0\"; declare namespace tei=\"http://www.tei-c.org/ns/1.0\"; declare namespace array=\"http://www.w3.org/2005/xpath-functions/array\"; declare function local:filter($node as node(), $mode as xs:string) as xs:string? { if ($mode eq \"before\") then concat($node, \" \") else concat(\" \", $node) }; import module namespace kwic=\"http://exist-db.org/xquery/kwic\";'\n    +' let $pageLimit as xs:decimal := '+q.limit+' let $page as xs:decimal := '+q.page+' let $allResults := array { for $hit in collection(\"/db/SRO\")//tei:div'\n    + (q.query ? '[ft:query(., \"'+q.query+'\")]' : '')\n    +' let $score as xs:float := ft:score($hit) let $currentDate as xs:date := xs:date( data($hit//ab[@type=\"metadata\"]/date[@type=\"SortDate\"]/@when) ) let $rawCode as xs:decimal := xs:decimal( replace($hit//@xml:id, \"[^0-9]\", \"\") ) '\n    +' let $stockNotes := count($hit//note[@subtype=\"stock\"]) let $enteredNotes := count($hit//note[@subtype=\"entered\"])'\n    +' let $isStationer := contains(data($hit//persName[contains(@role, \"enterer\")]/@role),\"stationer\")'\n    +' let $people := for $pers in $hit//persName return <person> <role>{data($pers/@role)}</role> <name> <title> {normalize-space($pers/text()[last()])} </title> <forename>{$pers/forename/text()}</forename> <surname>{$pers/surname/text()}</surname> </name> </person> where $hit/@type=\"entry\" '\n\n    //personName\n    //+ (q.person ? ' and contains(lower-case(string-join($people//text(),\"\")), \"'+q.person.toLowerCase()+'\")' : '')\n\n    + (q.person ? ' and index-of($people/descendant::*/lower-case(text()),\"'+q.person.toLowerCase()+'\") > 0' : '')\n\n    //copies\n    + entererRoleFilterString\n    + entryTypeFilterString\n    + volumeFilterString\n\n    //minDate & maxDate\n    + (q.minDate ? \" and ($currentDate >= xs:date('\"+q.minDate+\"') )\" : \"\")\n    + (q.maxDate ? \" and ($currentDate <= xs:date('\"+q.maxDate+\"') )\" : \"\")\n\n    //minDate & maxDate : from filters\n    + dateFiltersString\n\n    //minFees\n    + (q.minFees ? ' and data($hit//num[@type=\"totalPence\"]/@value) >= '+q.minFees+' ' : '')\n    //maxFees\n    + (q.maxFees ? ' and data($hit//num[@type=\"totalPence\"]/@value) <= '+q.maxFees+' ' : '')\n\n    //entry\n\n    // FILTERS\n\n\n\n\n    var post_query = '  let $expanded := kwic:expand($hit) let $sum := array { for $h in $expanded//exist:match return kwic:get-summary($expanded, $h, <config xmlns=\"\" width=\"40\"/>) } return <entry> <people>{$people}</people> <date>{ $currentDate }</date> <docid>{data($hit//@xml:id)}</docid> <doc>{$hit}</doc> <sum>{$sum}</sum> </entry> } let $resultsCount as xs:decimal := array:size($allResults) let $maxpage as xs:double := math-ext:ceil($resultsCount div $pageLimit) let $firstEntry := if ( $page > $maxpage ) then ($maxpage * $pageLimit) - ($pageLimit - 1) else ($page * $pageLimit) - ($pageLimit - 1) let $offset := if ( ($firstEntry + $pageLimit) > $resultsCount ) then ($firstEntry + $pageLimit) - $resultsCount else 0 let $pagesToReturn := $pageLimit - $offset return <results> <paging> <current>{$page}</current> <last>{$maxpage}</last> <returned>{$pagesToReturn}</returned> <total>{$resultsCount}</total> </paging> <entries>{array:flatten(array:subarray($allResults, $firstEntry, $pagesToReturn))}</entries> </results> '\n\n    //query = query + ' and contains($people//role/text(), \"enterer\") '\n\n    if ( q.sortField ){\n      query = query + ' order by $hit//'+translateOrderingField(q.orderField).trim()+' '+q.direction+' '\n    } else {\n      query = query + ' order by $score descending '\n    }\n\n    var query = query+post_query\n\n    console.log(query)\n\n    return new Promise( function (Resolve,Reject){\n\n        try{\n          db.query(query,{wrap:\"no\"})\n              .then(function(result) {\n                //  console.log('xQuery result:', result);\n                  Resolve(result)\n                })\n\n        } catch (error){\n           Reject (\"Something failed in the ExistDB Module: \"+error)\n        }\n\n      });\n\n  }\n\nexport async function textSearch(query, page, limit, orderField, direction){\n\n    var query  = 'xquery version \"3.1\"; import module namespace kwic=\"http://exist-db.org/xquery/kwic\"; declare default element namespace \"http://www.tei-c.org/ns/1.0\"; declare namespace tei=\"http://www.tei-c.org/ns/1.0\"; declare namespace array=\"http://www.w3.org/2005/xpath-functions/array\"; let $pageLimit as xs:decimal := '+limit+' let $page as xs:decimal := '+page+' '\n          +'let $allResults := array { for $hit in collection(\"/db/SRO\")//tei:div[ft:query(., \"'+query+'\")]'\n          +' let $score as xs:float := ft:score($hit) where $hit/@type=\"entry\"'\n\n    var post_query = ' let $sum := kwic:summarize($hit, <config xmlns=\"\" width=\"100\"/>) return <comp><doc>{$hit}</doc><sum>{$sum}</sum></comp> } '\n          +' let $resultsCount as xs:decimal := array:size($allResults) let $maxpage as xs:double := math-ext:ceil($resultsCount div $pageLimit) let $firstEntry := if ( $page > $maxpage ) then ($maxpage * $pageLimit) - ($pageLimit - 1) else ($page * $pageLimit) - ($pageLimit - 1) let $offset := if ( ($firstEntry + $pageLimit) > $resultsCount ) then ($firstEntry + $pageLimit) - $resultsCount else 0 let $pagesToReturn := $pageLimit - $offset return <results> <paging> <current>{$page}</current> <last>{$maxpage}</last> <returned>{$pagesToReturn}</returned> <total>{$resultsCount}</total> </paging> <entries> { for $hita in array:flatten(array:subarray($allResults, $firstEntry, $pagesToReturn)) let $hit := $hita/doc return <entry> <docid>{data($hit//@xml:id)}</docid> <date>{ if (data($hit//ab[@type=\"metadata\"]/date/@when)) then data($hit//ab[@type=\"metadata\"]/date/@when) else data($hit//ab[@type=\"metadata\"]/date/@notBefore) }</date> <people>{ for $pers in $hit//persName return <person> <role>{data($pers/@role)}</role> <name> <title> {normalize-space($pers/text()[last()])} </title> <forename>{$pers/forename/text()}</forename> <surname>{$pers/surname/text()}</surname> </name> </person> } </people> {$hit} {$hita/sum} </entry> } </entries> </results> '\n\n\n    if ( orderField ){\n      query = query + ' order by $hit//'+orderField.trim()+' '+direction+' '\n    } else {\n      query = query + ' order by $score descending '\n    }\n\n    var query = query+post_query\n\n    console.log(query)\n\n    return new Promise( function (Resolve,Reject){\n\n        try{\n          db.query(query,{wrap:\"no\"})\n              .then(function(result) {\n                  //console.log('xQuery result:', result);\n                  Resolve(result)\n                })\n\n        } catch (error){\n           Reject (\"Something failed in the ExistDB Module: \"+error)\n        }\n\n      });\n\n  }\n\n  export async function getAllEntriesOrdered(){\n\n      var query = 'xquery version \"3.0\";'+\n                  'declare default element namespace \"http://www.tei-c.org/ns/1.0\";'+\n                  'declare namespace tei=\"http://www.tei-c.org/ns/1.0\";'+\n                  '<entries>'+\n                  '{'+\n                  ' for $hit in collection(\"/db/SRO\")//tei:div[@type=\"entry\"]'+\n                  'let $score as xs:float := ft:score($hit) where $hit/@type=\"entry\" order by $score descending return <entry> <docid>{data($hit/@xml:id)}</docid> <score>{data($score)}</score> <date>{ if (data($hit//ab[@type=\"metadata\"]/date/@when)) then data($hit//ab[@type=\"metadata\"]/date/@when) else data($hit//ab[@type=\"metadata\"]/date/@notBefore) }</date> <stationers>{ for $stat in $hit//persName where $stat/@role=\"stationer\" return <name> {string-join( ($stat/forename,$stat/surname), \", \")} </name> } </stationers> <doc>{ for $item in $hit/p return <item>{fn:string-join($item//text(),\" \")}</item> }</doc> </entry> } </entries>'\n\n      return new Promise( function (Resolve,Reject){\n\n          try{\n            db.query(query,{wrap:\"no\"})\n                .then(function(result) {\n                    //console.log('xQuery result:', result);\n                    Resolve(result)\n                  })\n\n          } catch (error){\n             Reject (\"Something failed in the ExistDB Module: \"+error)\n          }\n\n        });\n\n    }\n\n\n    export async function getAllPeople(){\n\n        return new Promise( function (Resolve,Reject){\n            try{\n              db.executeStoredQuery(\"/QS/allPeople.xq\")\n                  .then(function(result) {\n                      //console.log('xQuery result:', result);\n                      Resolve(result)\n                    })\n\n            } catch (error){\n               Reject (\"Something failed in the ExistDB Module: \"+error)\n            }\n          });\n      }\n\n    export async function getAllEntries(){\n\n        return new Promise( function (Resolve,Reject){\n            try{\n              db.executeStoredQuery(\"/QS/allEntries.xq\")\n                  .then(function(result) {\n                      Resolve(result)\n                    })\n\n            } catch (error){\n               Reject (\"Something failed in the ExistDB Module: \"+error)\n            }\n\n          });\n\n      }\n\n      export async function getEntry(entryID){\n        var query = 'xquery version \"3.1\"; declare default element namespace \"http://www.tei-c.org/ns/1.0\"; declare namespace tei=\"http://www.tei-c.org/ns/1.0\"; for $coll in collection(\"/db/SRO\") for $hit in $coll//tei:div[@type=\"entry\"] where $hit/@xml:id = \"'+entryID+'\" return $hit';\n        console.log(query);\n\n        return new Promise( function (Resolve,Reject){\n\n            try{\n              db.query(query,{wrap:\"no\"})\n                  .then(function(result) {\n                      //console.log('xQuery result:', result);\n                      Resolve(result)\n                    })\n\n            } catch (error){\n               Reject (\"Something failed in the ExistDB Module: \"+error)\n            }\n\n          });\n\n        }\n\n      export async function getAllEntriesPaged(page,limit){\n\n        var query = 'xquery version \"3.1\"; declare default element namespace \"http://www.tei-c.org/ns/1.0\"; declare namespace tei=\"http://www.tei-c.org/ns/1.0\"; declare namespace array=\"http://www.w3.org/2005/xpath-functions/array\"; let $pageLimit as xs:decimal := '+limit+' let $page as xs:decimal := '+page+' let $allResults := array { for $hit in collection(\"/db/SRO\")//tei:div where $hit/@type=\"entry\" return <comp><doc>{$hit}</doc></comp> } let $resultsCount as xs:decimal := array:size($allResults) let $maxpage as xs:double := math-ext:ceil($resultsCount div $pageLimit) let $firstEntry := if ( $page > $maxpage ) then ($maxpage * $pageLimit) - ($pageLimit - 1) else ($page * $pageLimit) - ($pageLimit - 1) let $offset := if ( ($firstEntry + $pageLimit) > $resultsCount ) then ($firstEntry + $pageLimit) - $resultsCount else 0 let $pagesToReturn := $pageLimit - $offset return <results> <paging> <current>{$page}</current> <last>{$maxpage}</last> <returned>{$pagesToReturn}</returned> <total>{$resultsCount}</total> </paging> <entries> { for $hita in array:flatten(array:subarray($allResults, $firstEntry, $pagesToReturn)) let $hit := $hita/doc return <entry> <docid>{data($hit//@xml:id)}</docid> <date>{ if (data($hit//ab[@type=\"metadata\"]/date/@when)) then data($hit//ab[@type=\"metadata\"]/date/@when) else data($hit//ab[@type=\"metadata\"]/date/@notBefore) }</date> <people>{ for $pers in $hit//persName return <person> <role>{data($pers/@role)}</role> <name> <title> {normalize-space($pers/text()[last()])} </title> <forename>{$pers/forename/text()}</forename> <surname>{$pers/surname/text()}</surname> </name> </person> } </people> {$hit} </entry> } </entries> </results>';\n\n        console.log(query);\n\n        return new Promise( function (Resolve,Reject){\n\n            try{\n              db.query(query,{wrap:\"no\"})\n                  .then(function(result) {\n                      //console.log('xQuery result:', result);\n                      Resolve(result)\n                    }).catch(function (rejected){\n                      console.log(rejected)\n                    })\n\n            } catch (error){\n               Reject (\"Something failed in the ExistDB Module: \"+error)\n            }\n\n          });\n        }\n\n\n\n// USAGE EXAMPLE OF THE EASY-EXIST MODULE\n\n// PUT a document\n// db.put('/my-collection/my-document', body)\n//\n//     // Get the body of a document\n//     .then(function() {\n//         return db.get('/my-collection/my-document');\n//     })\n//     .then(function(doc) {\n//         console.log('Document Body:', doc);\n//     })\n//\n//     // Execute xQuery\n//     .then(function() {\n//         return db.query('collection(\"my-collection\")/message/body');\n//     })\n//     .then(function(result) {\n//         console.log('xQuery result:', result);\n//     })\n//\n//     // Delete document\n//     .then(function() {\n//         return db.delete('/my-collection/my-document');\n//     })\n//     .then(function() {\n//         console.log('Document Deleted');\n//     });\n//\n\n//WASUsPS\n"]}