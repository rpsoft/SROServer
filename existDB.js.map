{"version":3,"sources":["existDB.js"],"names":["q","queryCode","Base64","encode","i","bufferSize","queryBuffer","get","console","log","length","data","filters","eval","dateFiltersArray","volumeFiltersArray","entryTypeFiltersArray","entererRoleFiltersArray","f","filterKey","split","filterValue","minDate","maxDate","push","toLowerCase","dateFiltersString","mergeFilter","volumeFilterString","entryTypeFilterString","entererRoleFilterString","advSearch_dates","macroFilterArray","feesArray","minFees","maxFees","person","entry","join","macroFilter","query","limit","page","post_query","sortField","direction","translateOrderingField","orderField","trim","Resolve","Reject","db","wrap","then","result","shift","error","advSearch","indexOf","textSearch","getAllEntriesOrdered","executeStoredQuery","getAllPeople","getAllEntries","entryID","getEntry","catch","rejected","getAllEntriesPaged","exist","require","Deque","DB","username","password","xmlField","filterArray","filterString"],"mappings":"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","file":"existDB.js","sourcesContent":["var exist = require('easy-exist');\nvar Base64 = require('js-base64').Base64;\nvar Deque = require(\"double-ended-queue\");\n\n\nimport {EDB_LOGIN} from \"./config\"\n\nvar bufferSize = 20\nvar queryBuffer = new Deque(bufferSize)\n\n\n// connect\nvar db = new exist.DB('http://localhost:8080', {\n    username: EDB_LOGIN.username,\n    password: EDB_LOGIN.password,\n});\n\n\nfunction translateOrderingField(sortField){\n  var xmlField = \"\"\n  switch (sortField){\n        case 'id':\n         xmlField = '@xml:id'\n         break;\n        case 'date':\n         xmlField = 'date//text()[last()]'\n         break;\n        default:\n         xmlField = '@xml:id'\n      }\n      return xmlField;\n}\n\nfunction mergeFilter(filterArray){\n    var filterString = \"\"\n    if ( filterArray.length > 0 ) {\n\n      filterString = filterArray.join(\" or \")\n\n    }\n    return filterString;\n}\n\nexport async function advSearch(q){\n  //  args, page, limit, orderField, direction\n    var queryCode = Base64.encode(JSON.stringify(q));\n\n    //console.log(\"QUERY: \"+Base64.encode(JSON.stringify(q)))\n\n    for (var i = 0; i < bufferSize; i++ ){\n      if ( queryBuffer.get(i) && queryBuffer.get(i).queryCode == queryCode ){\n          console.log(\"Reusing buffered search: \"+queryBuffer.length)\n          return queryBuffer.get(i).data;\n      }\n    }\n\n    var filters = eval(q.filters)\n\n    console.log(filters)\n    //{\"query\":\"william\",\"person\":\"gfdgfd\",\"copies\":\"fsdfds\",\"minDate\":\"-14999130000000\",\"maxDate\":\"1000335600000\",\"minFees\":\"32\",\"maxFees\":\"32\",\"entry\":\"fdsafdsarew\",\"page\":\"1\",\"limit\":\"20\",\"sortField\":\"@xml:id\",\"direction\":\"ascending\"}\n\n    var dateFiltersArray = [];\n\n    var volumeFiltersArray = [];\n\n    var entryTypeFiltersArray = [];\n\n    var entererRoleFiltersArray = [];\n\n    for ( var f in filters ){\n\n      var filterKey = filters[f].split(\"_\")[0]\n      var filterValue  = filters[f].split(\"_\")[1]\n\n      switch ( filterKey ){\n        case \"date\":\n            var minDate = filterValue.split(\"-\")[0]+\"-01-01\"\n            var maxDate = filterValue.split(\"-\")[1]+\"-12-31\"\n\n            dateFiltersArray.push (\"(.//ab[@type='metadata']/date/@when >= xs:date('\"+minDate+\"') and .//ab[@type='metadata']/date/@when <= xs:date('\"+maxDate+\"'))\")\n            dateFiltersArray.push (\"(.//ab[@type='metadata']/date/@notBefore >= xs:date('\"+minDate+\"') and .//ab[@type='metadata']/date/@notBefore <= xs:date('\"+maxDate+\"'))\")\n\n            //dateFiltersArray.push (\"( ( (.//ab[@type='metadata']/date/@when >= xs:date('\"+minDate+\"')) or (.//ab[@type='metadata']/date/@notBefore >= xs:date('\"+minDate+\"')) ) and ((.//ab[@type='metadata']/date/@when <= xs:date('\"+maxDate+\"') ) or (.//ab[@type='metadata']/date/@notBefore <= xs:date('\"+maxDate+\"')) ) )\")\n\n            break;\n        case \"volume\":\n            switch (filterValue) {\n              case \"A\":\n                  volumeFiltersArray.push('(xs:decimal( replace(.//@xml:id, \"[^0-9]\", \"\") ) < 1265)')\n                break;\n              case \"B\":\n                  volumeFiltersArray.push('((xs:decimal( replace(.//@xml:id, \"[^0-9]\", \"\") ) > 1264) and (xs:decimal( replace(.//@xml:id, \"[^0-9]\", \"\") ) < 3635))')\n                break;\n              case \"C\":\n                  volumeFiltersArray.push('(xs:decimal( replace(.//@xml:id, \"[^0-9]\", \"\") ) > 3634)')\n                break;\n            }\n            break;\n\n        case \"entryType\":\n\n            entryTypeFiltersArray.push('(count(.//note[@subtype=\"'+(filterValue.toLowerCase() == \"notprinted\" ? \"notPrinted\" : filterValue.toLowerCase())+'\"]) > 0)')\n\n            break\n\n        case \"entererRole\":\n            switch(filterValue) {\n              case \"Stationer\":\n                entererRoleFiltersArray.push(\"contains(data(.//persName[contains(@role, 'enterer')]/@role),'stationer')\")\n                break;\n              case \"Non-Stationer\":\n                entererRoleFiltersArray.push(\"not(contains(data(.//persName[contains(@role, 'enterer')]/@role),'stationer'))\")\n                break;\n            }\n\n            break;\n      }\n    }\n\n    var dateFiltersString = mergeFilter(dateFiltersArray)\n    var volumeFilterString = mergeFilter(volumeFiltersArray)\n    var entryTypeFilterString = mergeFilter(entryTypeFiltersArray)\n    var entererRoleFilterString = mergeFilter(entererRoleFiltersArray)\n\n    // var statusTypes = [ \"annotated\", \"cancelled\", \"entered\", \"incomplete\", \"notPrinted\", \"other\", \"reassigned\", \"shared\", \"stock\", \"unknown\" ]\n    // var statusGatheringString = statusTypes.map( (v,i) => { return  'let $'+v.toLowerCase()+ 'notes := count($hit//note[@subtype=\"'+v+'\"])' }  ).join(\" \")\n\n    // console.log(statusGatheringString)\n    console.log(entryTypeFilterString)\n\n    var advSearch_dates = \"\"\n\n    if(q.minDate && q.maxDate){\n      advSearch_dates = \"and ( ($currentDate >= xs:date('\"+q.minDate+\"') and $currentDate <= xs:date('\"+q.maxDate+\"')) )\";\n    } else if( q.minDate ){\n      advSearch_dates = \"and ( ($currentDate >= xs:date('\"+q.minDate+\"') ) )\";\n    } else if( q.maxDate ){\n      advSearch_dates = \"and ( ($currentDate <= xs:date('\"+q.maxDate+\"') ) )\";\n    }\n\n    console.log(\"minDate: \"+q.minDate)\n    console.log(\"maxDate: \"+q.maxDate)\n\n    console.log(\"hello:\"+advSearch_dates);\n\n    var macroFilterArray = [];\n\n    dateFiltersString.length > 0 ? macroFilterArray.push ( \"[\"+dateFiltersString+\"]\" ) : \"\"\n    volumeFilterString.length > 0 ? macroFilterArray.push ( \"[\"+volumeFilterString+\"]\" ) : \"\"\n    entererRoleFilterString.length > 0 ? macroFilterArray.push ( \"[\"+entererRoleFilterString+\"]\" ) : \"\"\n    entryTypeFilterString.length > 0 ? macroFilterArray.push ( \"[\"+entryTypeFilterString+\"]\" ) : \"\"\n\n    var feesArray = []\n    q.minFees ? feesArray.push(' (data(.//num[@type=\"totalPence\"]/@value) >= '+q.minFees+' )') : ''\n    q.maxFees ? feesArray.push(' (data(.//num[@type=\"totalPence\"]/@value) <= '+q.maxFees+' )') : ''\n\n\n    q.person ? macroFilterArray.push('[contains(lower-case(string-join(.//persName//text(),\"\")), \"'+q.person.toLowerCase()+'\") ]') : \"\"\n\n    q.entry ? macroFilterArray.push('[.//@xml:id = \"'+q.entry+'\"]') : \"\"\n\n    feesArray.length > 0 ? macroFilterArray.push(\" [ \"+feesArray.join ( \" and \" )+\" ] \") : \"\"\n\n    var macroFilter = macroFilterArray.join(\"\")\n\n    console.log(\"MAC: \"+macroFilter)\n\n\n    var query  = 'xquery version \"3.1\"; declare default element namespace \"http://www.tei-c.org/ns/1.0\"; declare namespace tei=\"http://www.tei-c.org/ns/1.0\"; declare namespace array=\"http://www.w3.org/2005/xpath-functions/array\"; declare function local:filter($node as node(), $mode as xs:string) as xs:string? { if ($mode eq \"before\") then concat($node, \" \") else concat(\" \", $node) }; import module namespace kwic=\"http://exist-db.org/xquery/kwic\";'\n    +' let $pageLimit as xs:decimal := '+q.limit+' let $page as xs:decimal := '+q.page+' let $allResults := array { for $hit in collection(\"/db/SRO\")//tei:div'\n    + (q.query ? '[ft:query(., \"'+q.query+'\")]' : '')\n    + (macroFilter ? macroFilter : \"\")\n    +' let $currentDate as xs:date := xs:date( if (data($hit//ab[@type=\"metadata\"]/date/@when)) then data($hit//ab[@type=\"metadata\"]/date/@when) else data($hit//ab[@type=\"metadata\"]/date/@notBefore)) '\n\n    // + statusGatheringString\n\n    // +' let $docid := data($hit//@xml:id)'\n    // +' let $isStationer := contains(data($hit//persName[contains(@role, \"enterer\")]/@role),\"stationer\")'\n    +' where $hit/@type=\"entry\" '\n\n    //personName\n    // + (q.person ? ' and contains(lower-case(string-join($people//text(),\"\")), \"'+q.person.toLowerCase()+'\")' : '')\n    //\n    // + (q.entry ? 'and (contains($docid,\"'+q.entry+'\"))' : \"\")\n    // +\" \"+ advSearch_dates+\" \"\n\n    //copies\n    // + entererRoleFilterString\n    // + entryTypeFilterString\n  //  + volumeFilterString\n\n    //minDate & maxDate\n  //  + dateFiltersString\n\n    //minFees\n    // + (q.minFees ? ' and data($hit//num[@type=\"totalPence\"]/@value) >= '+q.minFees+' ' : '')\n    // //maxFees\n    // + (q.maxFees ? ' and data($hit//num[@type=\"totalPence\"]/@value) <= '+q.maxFees+' ' : '')\n\n\n    var post_query = ' let $expanded := kwic:expand($hit) let $sum := array { for $h in $expanded//exist:match return kwic:get-summary($expanded, $h, <config xmlns=\"\" width=\"40\"/>) } return <entry> <date>{ if (data($hit//ab[@type=\"metadata\"]/date/@when)) then data($hit//ab[@type=\"metadata\"]/date/@when) else data($hit//ab[@type=\"metadata\"]/date/@notBefore) }</date> <docid>{data($hit//@xml:id)}</docid> <doc>{$hit}</doc> <sum>{$sum}</sum> </entry> } let $resultsCount as xs:decimal := array:size($allResults) let $maxpage as xs:double := math-ext:ceil($resultsCount div $pageLimit) let $firstEntry := if ( $page > $maxpage ) then ($maxpage * $pageLimit) - ($pageLimit - 1) else ($page * $pageLimit) - ($pageLimit - 1) let $offset := if ( ($firstEntry + $pageLimit) > $resultsCount ) then ($firstEntry + $pageLimit) - $resultsCount else 0 let $pagesToReturn := if ( $pageLimit - $offset < 1) then 1 else $pageLimit - $offset return <results> <paging> <current>{$page}</current> <last>{$maxpage}</last> <returned>{$pagesToReturn}</returned> <total>{$resultsCount}</total> </paging> <entries>{array:flatten(array:subarray($allResults, $firstEntry, $pagesToReturn))}</entries> </results> '\n\n    if ( q.sortField ){\n      if ( q.sortField == \"date\" ){\n        query = query + ' order by $currentDate '+q.direction+' '\n      } else {\n        query = query + ' order by $hit//'+translateOrderingField(q.orderField).trim()+' '+q.direction+' '\n      }\n    } else {\n      query = query + ' order by $hit//@xml:id ascending '\n    }\n\n    var query = query+post_query\n\n    console.log(query)\n\n    return new Promise( function (Resolve,Reject){\n\n        try{\n          db.query(query,{wrap:\"no\"})\n              .then(function(result) {\n\n                  if ( queryBuffer.length >= bufferSize){\n\n                    queryBuffer.shift()\n                  }\n\n                  queryBuffer.push({queryCode : queryCode, data: result })\n                  Resolve(result)\n                })\n\n        } catch (error){\n           Reject (\"Something failed in the ExistDB Module: \"+error)\n        }\n\n      });\n\n  }\n\nexport async function textSearch(query, page, limit, orderField, direction){\n\n    var query  = 'xquery version \"3.1\"; import module namespace kwic=\"http://exist-db.org/xquery/kwic\"; declare default element namespace \"http://www.tei-c.org/ns/1.0\"; declare namespace tei=\"http://www.tei-c.org/ns/1.0\"; declare namespace array=\"http://www.w3.org/2005/xpath-functions/array\"; let $pageLimit as xs:decimal := '+limit+' let $page as xs:decimal := '+page+' '\n          +'let $allResults := array { for $hit in collection(\"/db/SRO\")//tei:div[ft:query(., \"'+query+'\")]'\n          +' let $score as xs:float := ft:score($hit) where $hit/@type=\"entry\"'\n\n    var post_query = ' let $sum := kwic:summarize($hit, <config xmlns=\"\" width=\"100\"/>) return <comp><doc>{$hit}</doc><sum>{$sum}</sum></comp> } '\n          +' let $resultsCount as xs:decimal := array:size($allResults) let $maxpage as xs:double := math-ext:ceil($resultsCount div $pageLimit) let $firstEntry := if ( $page > $maxpage ) then ($maxpage * $pageLimit) - ($pageLimit - 1) else ($page * $pageLimit) - ($pageLimit - 1) let $offset := if ( ($firstEntry + $pageLimit) > $resultsCount ) then ($firstEntry + $pageLimit) - $resultsCount else 0 let $pagesToReturn := $pageLimit - $offset return <results> <paging> <current>{$page}</current> <last>{$maxpage}</last> <returned>{$pagesToReturn}</returned> <total>{$resultsCount}</total> </paging> <entries> { for $hita in array:flatten(array:subarray($allResults, $firstEntry, $pagesToReturn)) let $hit := $hita/doc return <entry> <docid>{data($hit//@xml:id)}</docid> <date>{ if (data($hit//ab[@type=\"metadata\"]/date/@when)) then data($hit//ab[@type=\"metadata\"]/date/@when) else data($hit//ab[@type=\"metadata\"]/date/@notBefore) }</date> <people>{ for $pers in $hit//persName return <person> <role>{data($pers/@role)}</role> <name> <title> {normalize-space($pers/text()[last()])} </title> <forename>{$pers/forename/text()}</forename> <surname>{$pers/surname/text()}</surname> </name> </person> } </people> {$hit} {$hita/sum} </entry> } </entries> </results> '\n\n\n    if ( orderField ){\n      if( orderField.indexOf(\"date\") > -1 ){\n        query = query + ' order by $currentDate '+direction+' '\n      } else {\n        query = query + ' order by $hit//'+orderField.trim()+' '+direction+' '\n      }\n    } else {\n      query = query + ' order by $score descending '\n    }\n\n    var query = query+post_query\n\n    console.log(query)\n\n    return new Promise( function (Resolve,Reject){\n\n        try{\n          db.query(query,{wrap:\"no\"})\n              .then(function(result) {\n                  //console.log('xQuery result:', result);\n                  Resolve(result)\n                })\n\n        } catch (error){\n           Reject (\"Something failed in the ExistDB Module: \"+error)\n        }\n\n      });\n\n  }\n\n  export async function getAllEntriesOrdered(){\n\n\n      var query = 'xquery version \"3.0\";'+\n                  'declare default element namespace \"http://www.tei-c.org/ns/1.0\";'+\n                  'declare namespace tei=\"http://www.tei-c.org/ns/1.0\";'+\n                  '<entries>'+\n                  '{'+\n                  ' for $hit in collection(\"/db/SRO\")//tei:div[@type=\"entry\"]'+\n                  'let $score as xs:float := ft:score($hit) where $hit/@type=\"entry\" order by $score descending return <entry> <docid>{data($hit/@xml:id)}</docid> <score>{data($score)}</score> <date>{ if (data($hit//ab[@type=\"metadata\"]/date/@when)) then data($hit//ab[@type=\"metadata\"]/date/@when) else data($hit//ab[@type=\"metadata\"]/date/@notBefore) }</date> <stationers>{ for $stat in $hit//persName where $stat/@role=\"stationer\" return <name> {string-join( ($stat/forename,$stat/surname), \", \")} </name> } </stationers> <doc>{ for $item in $hit/p return <item>{fn:string-join($item//text(),\" \")}</item> }</doc> </entry> } </entries>'\n\n      return new Promise( function (Resolve,Reject){\n\n          try{\n            db.query(query,{wrap:\"no\"})\n                .then(function(result) {\n                    //console.log('xQuery result:', result);\n                    Resolve(result)\n                  })\n\n          } catch (error){\n             Reject (\"Something failed in the ExistDB Module: \"+error)\n          }\n\n        });\n\n    }\n\n\n    export async function getAllPeople(){\n\n        return new Promise( function (Resolve,Reject){\n            try{\n              db.executeStoredQuery(\"/QS/allPeople.xq\")\n                  .then(function(result) {\n                      //console.log('xQuery result:', result);\n                      Resolve(result)\n                    })\n\n            } catch (error){\n               Reject (\"Something failed in the ExistDB Module: \"+error)\n            }\n          });\n      }\n\n    export async function getAllEntries(){\n\n        return new Promise( function (Resolve,Reject){\n            try{\n              db.executeStoredQuery(\"/QS/allEntries.xq\")\n                  .then(function(result) {\n                      Resolve(result)\n                    })\n\n            } catch (error){\n               Reject (\"Something failed in the ExistDB Module: \"+error)\n            }\n\n          });\n\n      }\n\n      export async function getEntry(entryID){\n        var query = 'xquery version \"3.1\"; declare default element namespace \"http://www.tei-c.org/ns/1.0\"; declare namespace tei=\"http://www.tei-c.org/ns/1.0\"; for $coll in collection(\"/db/SRO\") for $hit in $coll//tei:div[@type=\"entry\"] where $hit/@xml:id = \"'+entryID+'\" return $hit';\n        console.log(query);\n\n        return new Promise( function (Resolve,Reject){\n\n            try{\n              db.query(query,{wrap:\"no\"})\n                  .then(function(result) {\n                      //console.log('xQuery result:', result);\n                      Resolve(result)\n                    })\n\n            } catch (error){\n               Reject (\"Something failed in the ExistDB Module: \"+error)\n            }\n\n          });\n\n        }\n\n      export async function getAllEntriesPaged(page,limit,orderField, direction){\n        console.log(\"USAMOS ESTE: \"+orderField+\" -- \"+direction)\n\n        var queryCode = Base64.encode(page+\"-\"+limit+\"-\"+orderField+\"-\"+direction);\n\n        //console.log(\"QUERY: \"+Base64.encode(JSON.stringify(q)))\n\n        for (var i = 0; i < bufferSize; i++ ){\n          if ( queryBuffer.get(i) && queryBuffer.get(i).queryCode == queryCode ){\n              return queryBuffer.get(i).data;\n          }\n        }\n\n\n        var query = 'xquery version \"3.1\"; declare default element namespace \"http://www.tei-c.org/ns/1.0\"; declare namespace tei=\"http://www.tei-c.org/ns/1.0\"; declare namespace array=\"http://www.w3.org/2005/xpath-functions/array\"; let $pageLimit as xs:decimal := '+limit+' let $page as xs:decimal := '+page+' let $allResults := array { for $hit in collection(\"/db/SRO\")//tei:div '\n        +' let $score as xs:float := ft:score($hit) let $currentDate as xs:date := xs:date( if (data($hit//ab[@type=\"metadata\"]/date/@when)) then data($hit//ab[@type=\"metadata\"]/date/@when) else data($hit//ab[@type=\"metadata\"]/date/@notBefore)) let $rawCode as xs:decimal := xs:decimal( replace($hit//@xml:id, \"[^0-9]\", \"\") ) '\n        +' where $hit/@type=\"entry\" '\n\n        if ( orderField ){\n          if( orderField.indexOf(\"date\") > -1 ){\n            query = query + ' order by $currentDate '+direction+' '\n          } else if( orderField.indexOf(\"volume\") > -1 ){\n            query = query + ' order by $rawCode '+direction+' '\n          } else {\n            query = query + ' order by $hit//'+orderField.trim()+' '+direction+' '\n          }\n        } else {\n          query = query + ' order by $score descending '\n        }\n\n        query = query +'return <comp><doc>{$hit}</doc></comp> } let $resultsCount as xs:decimal := array:size($allResults) let $maxpage as xs:double := math-ext:ceil($resultsCount div $pageLimit) let $firstEntry := if ( $page > $maxpage ) then ($maxpage * $pageLimit) - ($pageLimit - 1) else ($page * $pageLimit) - ($pageLimit - 1) let $offset := if ( ($firstEntry + $pageLimit) > $resultsCount ) then ($firstEntry + $pageLimit) - $resultsCount else 0 let $pagesToReturn := if ( $pageLimit - $offset < 1) then 1 else $pageLimit - $offset return <results> <paging> <current>{$page}</current> <last>{$maxpage}</last> <returned>{$pagesToReturn}</returned> <total>{$resultsCount}</total> </paging> <entries> { for $hita in array:flatten(array:subarray($allResults, $firstEntry, $pagesToReturn)) let $hit := $hita/doc return <entry> <docid>{data($hit//@xml:id)}</docid> <date>{ if (data($hit//ab[@type=\"metadata\"]/date/@when)) then data($hit//ab[@type=\"metadata\"]/date/@when) else data($hit//ab[@type=\"metadata\"]/date/@notBefore) }</date> <people>{ for $pers in $hit//persName return <person> <role>{data($pers/@role)}</role> <name> <title> {normalize-space($pers/text()[last()])} </title> <forename>{$pers/forename/text()}</forename> <surname>{$pers/surname/text()}</surname> </name> </person> } </people> {$hit} </entry> } </entries> </results>';\n\n\n        console.log(query);\n\n        return new Promise( function (Resolve,Reject){\n\n            try{\n              db.query(query,{wrap:\"no\"})\n                  .then(function(result) {\n                      //console.log('xQuery result:', result);\n                      queryBuffer.push({queryCode : queryCode, data: result })\n                      Resolve(result)\n                    }).catch(function (rejected){\n                      console.log(rejected)\n                    })\n\n            } catch (error){\n               Reject (\"Something failed in the ExistDB Module: \"+error)\n            }\n\n          });\n        }\n\n\n\n// USAGE EXAMPLE OF THE EASY-EXIST MODULE\n\n// PUT a document\n// db.put('/my-collection/my-document', body)\n//\n//     // Get the body of a document\n//     .then(function() {\n//         return db.get('/my-collection/my-document');\n//     })\n//     .then(function(doc) {\n//         console.log('Document Body:', doc);\n//     })\n//\n//     // Execute xQuery\n//     .then(function() {\n//         return db.query('collection(\"my-collection\")/message/body');\n//     })\n//     .then(function(result) {\n//         console.log('xQuery result:', result);\n//     })\n//\n//     // Delete document\n//     .then(function() {\n//         return db.delete('/my-collection/my-document');\n//     })\n//     .then(function() {\n//         console.log('Document Deleted');\n//     });\n//\n\n//WASUsPS\n"]}