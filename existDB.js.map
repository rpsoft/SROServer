{"version":3,"sources":["existDB.js"],"names":["q","console","log","filters","eval","dateFiltersArray","volumeFiltersArray","entryTypeFiltersArray","entererRoleFiltersArray","f","filterKey","split","filterValue","minDate","maxDate","push","toLowerCase","dateFiltersString","mergeFilter","volumeFilterString","entryTypeFilterString","entererRoleFilterString","statusTypes","statusGatheringString","map","v","i","join","advSearch_dates","query","limit","page","person","entry","minFees","maxFees","post_query","sortField","direction","translateOrderingField","orderField","trim","Resolve","Reject","db","wrap","then","result","error","advSearch","indexOf","textSearch","getAllEntriesOrdered","executeStoredQuery","getAllPeople","getAllEntries","entryID","getEntry","catch","rejected","getAllEntriesPaged","exist","require","DB","username","password","xmlField","filterArray","filterString","length"],"mappings":"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","file":"existDB.js","sourcesContent":["var exist = require('easy-exist');\n\nimport {EDB_LOGIN} from \"./config\"\n\n// connect\nvar db = new exist.DB('http://localhost:8080', {\n    username: EDB_LOGIN.username,\n    password: EDB_LOGIN.password,\n});\n\n\nfunction translateOrderingField(sortField){\n  var xmlField = \"\"\n  switch (sortField){\n        case 'id':\n         xmlField = '@xml:id'\n         break;\n        case 'date':\n         xmlField = 'date//text()[last()]'\n         break;\n        default:\n         xmlField = '@xml:id'\n      }\n      return xmlField;\n}\n\nfunction mergeFilter(filterArray){\n    var filterString = \"\"\n    if ( filterArray.length > 0 ) {\n\n      filterString = \"and ( \"+ filterArray.join(\" or \") +\" ) \"\n\n    }\n    return filterString;\n}\n\nexport async function advSearch(q){\n  //  args, page, limit, orderField, direction\n    console.log(JSON.stringify(q))\n\n    var filters = eval(q.filters)\n\n    console.log(filters)\n    //{\"query\":\"william\",\"person\":\"gfdgfd\",\"copies\":\"fsdfds\",\"minDate\":\"-14999130000000\",\"maxDate\":\"1000335600000\",\"minFees\":\"32\",\"maxFees\":\"32\",\"entry\":\"fdsafdsarew\",\"page\":\"1\",\"limit\":\"20\",\"sortField\":\"@xml:id\",\"direction\":\"ascending\"}\n\n    var dateFiltersArray = [];\n\n    var volumeFiltersArray = [];\n\n    var entryTypeFiltersArray = [];\n\n    var entererRoleFiltersArray = [];\n\n    for ( var f in filters ){\n\n      var filterKey = filters[f].split(\"_\")[0]\n      var filterValue  = filters[f].split(\"_\")[1]\n\n      switch ( filterKey ){\n        case \"date\":\n            var minDate = filterValue.split(\"-\")[0]+\"-01-01\"\n            var maxDate = filterValue.split(\"-\")[1]+\"-12-31\"\n\n            dateFiltersArray.push (\"($currentDate >= xs:date('\"+minDate+\"') and $currentDate <= xs:date('\"+maxDate+\"'))\")\n            break;\n        case \"volume\":\n            switch (filterValue) {\n              case \"A\":\n                  volumeFiltersArray.push(\"($rawCode < 1265)\")\n                break;\n              case \"B\":\n                  volumeFiltersArray.push(\"(($rawCode > 1264) and ($rawCode < 3635))\")\n                break;\n              case \"C\":\n                  volumeFiltersArray.push(\"($rawCode > 3634)\")\n                break;\n            }\n            break;\n\n        case \"entryType\":\n\n            entryTypeFiltersArray.push(\"($\"+filterValue.toLowerCase()+\"notes > 0)\")\n\n            break\n\n            // switch (filterValue) {\n            //   case \"Entered\":\n            //       entryTypeFiltersArray.push(\"($enteredNotes > 0)\")\n            //     break;\n            //   case \"Stock\":\n            //       entryTypeFiltersArray.push(\"($stockNotes > 0)\")\n            //     break;\n            // }\n        case \"entererRole\":\n            switch(filterValue) {\n              case \"Stationer\":\n                entererRoleFiltersArray.push(\"$isStationer\")\n                break;\n              case \"Non-Stationer\":\n                entererRoleFiltersArray.push(\"not($isStationer )\")\n                break;\n            }\n\n            break;\n      }\n    }\n\n    // console.log(dateFiltersArray.join(\" or \"))\n    var dateFiltersString = mergeFilter(dateFiltersArray)\n    var volumeFilterString = mergeFilter(volumeFiltersArray)\n    var entryTypeFilterString = mergeFilter(entryTypeFiltersArray)\n    var entererRoleFilterString = mergeFilter(entererRoleFiltersArray)\n\n    var statusTypes = [ \"annotated\", \"cancelled\", \"entered\", \"incomplete\", \"notPrinted\", \"other\", \"reassigned\", \"shared\", \"stock\", \"unknown\" ]\n    var statusGatheringString = statusTypes.map( (v,i) => { return  'let $'+v.toLowerCase()+ 'notes := count($hit//note[@subtype=\"'+v+'\"])' }  ).join(\" \")\n\n    console.log(statusGatheringString)\n\n    console.log(entryTypeFilterString)\n\n    var advSearch_dates = \"\"\n\n    if(q.minDate && q.maxDate){\n      advSearch_dates = \"and ( ($currentDate >= xs:date('\"+q.minDate+\"') and $currentDate <= xs:date('\"+q.maxDate+\"')) )\";\n    } else if( q.minDate ){\n      advSearch_dates = \"and ( ($currentDate >= xs:date('\"+q.minDate+\"') ) )\";\n    } else if( q.maxDate ){\n      advSearch_dates = \"and ( ($currentDate <= xs:date('\"+q.maxDate+\"') ) )\";\n    }\n\nconsole.log(\"minDate: \"+q.minDate)\nconsole.log(\"maxDate: \"+q.maxDate)\n\n    var query  = 'xquery version \"3.1\"; declare default element namespace \"http://www.tei-c.org/ns/1.0\"; declare namespace tei=\"http://www.tei-c.org/ns/1.0\"; declare namespace array=\"http://www.w3.org/2005/xpath-functions/array\"; declare function local:filter($node as node(), $mode as xs:string) as xs:string? { if ($mode eq \"before\") then concat($node, \" \") else concat(\" \", $node) }; import module namespace kwic=\"http://exist-db.org/xquery/kwic\";'\n    +' let $pageLimit as xs:decimal := '+q.limit+' let $page as xs:decimal := '+q.page+' let $allResults := array { for $hit in collection(\"/db/SRO\")//tei:div'\n    + (q.query ? '[ft:query(., \"'+q.query+'\")]' : '')\n    +' let $score as xs:float := ft:score($hit) let $currentDate as xs:date := xs:date( if (data($hit//ab[@type=\"metadata\"]/date/@when)) then data($hit//ab[@type=\"metadata\"]/date/@when) else data($hit//ab[@type=\"metadata\"]/date/@notBefore)) let $rawCode as xs:decimal := xs:decimal( replace($hit//@xml:id, \"[^0-9]\", \"\") ) '\n    // +' let $stockNotes := count($hit//note[@subtype=\"stock\"]) '\n    // +' let $enteredNotes := count($hit//note[@subtype=\"entered\"])'\n    + statusGatheringString\n\n    +' let $docid := data($hit//@xml:id)'\n    +' let $isStationer := contains(data($hit//persName[contains(@role, \"enterer\")]/@role),\"stationer\")'\n    +' let $people := for $pers in $hit//persName return <person> <role>{data($pers/@role)}</role> <name> <title> {normalize-space($pers/text()[last()])} </title> <forename>{$pers/forename/text()}</forename> <surname>{$pers/surname/text()}</surname> </name> </person> where $hit/@type=\"entry\" '\n\n    //personName\n    + (q.person ? ' and contains(lower-case(string-join($people//text(),\"\")), \"'+q.person.toLowerCase()+'\")' : '')\n\n    + (q.entry ? 'and (contains($docid,\"'+q.entry+'\"))' : \"\")\n    +\" \"+ advSearch_dates+\" \"\n\n    //copies\n    + entererRoleFilterString\n    + entryTypeFilterString\n    + volumeFilterString\n\n    //minDate & maxDate\n    + dateFiltersString\n\n    //minFees\n    + (q.minFees ? ' and data($hit//num[@type=\"totalPence\"]/@value) >= '+q.minFees+' ' : '')\n    //maxFees\n    + (q.maxFees ? ' and data($hit//num[@type=\"totalPence\"]/@value) <= '+q.maxFees+' ' : '')\n\n    //entry\n\n    // FILTERS\n\n\n\n\n    var post_query = '  let $expanded := kwic:expand($hit) let $sum := array { for $h in $expanded//exist:match return kwic:get-summary($expanded, $h, <config xmlns=\"\" width=\"40\"/>) } return <entry> <people>{$people}</people> <date>{ if (data($hit//ab[@type=\"metadata\"]/date/@when)) then data($hit//ab[@type=\"metadata\"]/date/@when) else data($hit//ab[@type=\"metadata\"]/date/@notBefore) }</date> <docid>{data($hit//@xml:id)}</docid> <doc>{$hit}</doc> <sum>{$sum}</sum> </entry> } let $resultsCount as xs:decimal := array:size($allResults) let $maxpage as xs:double := math-ext:ceil($resultsCount div $pageLimit) let $firstEntry := if ( $page > $maxpage ) then ($maxpage * $pageLimit) - ($pageLimit - 1) else ($page * $pageLimit) - ($pageLimit - 1) let $offset := if ( ($firstEntry + $pageLimit) > $resultsCount ) then ($firstEntry + $pageLimit) - $resultsCount else 0 let $pagesToReturn := if ( $pageLimit - $offset < 1) then 1 else $pageLimit - $offset return <results> <paging> <current>{$page}</current> <last>{$maxpage}</last> <returned>{$pagesToReturn}</returned> <total>{$resultsCount}</total> </paging> <entries>{array:flatten(array:subarray($allResults, $firstEntry, $pagesToReturn))}</entries> </results> '\n\n    //query = query + ' and contains($people//role/text(), \"enterer\") '\n\n    if ( q.sortField ){\n      if ( q.sortField == \"date\" ){\n        query = query + ' order by $currentDate '+q.direction+' '\n      }else {\n        query = query + ' order by $hit//'+translateOrderingField(q.orderField).trim()+' '+q.direction+' '\n      }\n    } else {\n      query = query + ' order by $score descending '\n    }\n\n    var query = query+post_query\n\n    console.log(query)\n\n    return new Promise( function (Resolve,Reject){\n\n        try{\n          db.query(query,{wrap:\"no\"})\n              .then(function(result) {\n                //  console.log('xQuery result:', result);\n                  Resolve(result)\n                })\n\n        } catch (error){\n           Reject (\"Something failed in the ExistDB Module: \"+error)\n        }\n\n      });\n\n  }\n\nexport async function textSearch(query, page, limit, orderField, direction){\n\n    var query  = 'xquery version \"3.1\"; import module namespace kwic=\"http://exist-db.org/xquery/kwic\"; declare default element namespace \"http://www.tei-c.org/ns/1.0\"; declare namespace tei=\"http://www.tei-c.org/ns/1.0\"; declare namespace array=\"http://www.w3.org/2005/xpath-functions/array\"; let $pageLimit as xs:decimal := '+limit+' let $page as xs:decimal := '+page+' '\n          +'let $allResults := array { for $hit in collection(\"/db/SRO\")//tei:div[ft:query(., \"'+query+'\")]'\n          +' let $score as xs:float := ft:score($hit) where $hit/@type=\"entry\"'\n\n    var post_query = ' let $sum := kwic:summarize($hit, <config xmlns=\"\" width=\"100\"/>) return <comp><doc>{$hit}</doc><sum>{$sum}</sum></comp> } '\n          +' let $resultsCount as xs:decimal := array:size($allResults) let $maxpage as xs:double := math-ext:ceil($resultsCount div $pageLimit) let $firstEntry := if ( $page > $maxpage ) then ($maxpage * $pageLimit) - ($pageLimit - 1) else ($page * $pageLimit) - ($pageLimit - 1) let $offset := if ( ($firstEntry + $pageLimit) > $resultsCount ) then ($firstEntry + $pageLimit) - $resultsCount else 0 let $pagesToReturn := $pageLimit - $offset return <results> <paging> <current>{$page}</current> <last>{$maxpage}</last> <returned>{$pagesToReturn}</returned> <total>{$resultsCount}</total> </paging> <entries> { for $hita in array:flatten(array:subarray($allResults, $firstEntry, $pagesToReturn)) let $hit := $hita/doc return <entry> <docid>{data($hit//@xml:id)}</docid> <date>{ if (data($hit//ab[@type=\"metadata\"]/date/@when)) then data($hit//ab[@type=\"metadata\"]/date/@when) else data($hit//ab[@type=\"metadata\"]/date/@notBefore) }</date> <people>{ for $pers in $hit//persName return <person> <role>{data($pers/@role)}</role> <name> <title> {normalize-space($pers/text()[last()])} </title> <forename>{$pers/forename/text()}</forename> <surname>{$pers/surname/text()}</surname> </name> </person> } </people> {$hit} {$hita/sum} </entry> } </entries> </results> '\n\n\n    if ( orderField ){\n      if( orderField.indexOf(\"date\") > -1 ){\n        query = query + ' order by $currentDate '+direction+' '\n      } else {\n        query = query + ' order by $hit//'+orderField.trim()+' '+direction+' '\n      }\n    } else {\n      query = query + ' order by $score descending '\n    }\n\n    var query = query+post_query\n\n    console.log(query)\n\n    return new Promise( function (Resolve,Reject){\n\n        try{\n          db.query(query,{wrap:\"no\"})\n              .then(function(result) {\n                  //console.log('xQuery result:', result);\n                  Resolve(result)\n                })\n\n        } catch (error){\n           Reject (\"Something failed in the ExistDB Module: \"+error)\n        }\n\n      });\n\n  }\n\n  export async function getAllEntriesOrdered(){\n\n\n      var query = 'xquery version \"3.0\";'+\n                  'declare default element namespace \"http://www.tei-c.org/ns/1.0\";'+\n                  'declare namespace tei=\"http://www.tei-c.org/ns/1.0\";'+\n                  '<entries>'+\n                  '{'+\n                  ' for $hit in collection(\"/db/SRO\")//tei:div[@type=\"entry\"]'+\n                  'let $score as xs:float := ft:score($hit) where $hit/@type=\"entry\" order by $score descending return <entry> <docid>{data($hit/@xml:id)}</docid> <score>{data($score)}</score> <date>{ if (data($hit//ab[@type=\"metadata\"]/date/@when)) then data($hit//ab[@type=\"metadata\"]/date/@when) else data($hit//ab[@type=\"metadata\"]/date/@notBefore) }</date> <stationers>{ for $stat in $hit//persName where $stat/@role=\"stationer\" return <name> {string-join( ($stat/forename,$stat/surname), \", \")} </name> } </stationers> <doc>{ for $item in $hit/p return <item>{fn:string-join($item//text(),\" \")}</item> }</doc> </entry> } </entries>'\n\n      return new Promise( function (Resolve,Reject){\n\n          try{\n            db.query(query,{wrap:\"no\"})\n                .then(function(result) {\n                    //console.log('xQuery result:', result);\n                    Resolve(result)\n                  })\n\n          } catch (error){\n             Reject (\"Something failed in the ExistDB Module: \"+error)\n          }\n\n        });\n\n    }\n\n\n    export async function getAllPeople(){\n\n        return new Promise( function (Resolve,Reject){\n            try{\n              db.executeStoredQuery(\"/QS/allPeople.xq\")\n                  .then(function(result) {\n                      //console.log('xQuery result:', result);\n                      Resolve(result)\n                    })\n\n            } catch (error){\n               Reject (\"Something failed in the ExistDB Module: \"+error)\n            }\n          });\n      }\n\n    export async function getAllEntries(){\n\n        return new Promise( function (Resolve,Reject){\n            try{\n              db.executeStoredQuery(\"/QS/allEntries.xq\")\n                  .then(function(result) {\n                      Resolve(result)\n                    })\n\n            } catch (error){\n               Reject (\"Something failed in the ExistDB Module: \"+error)\n            }\n\n          });\n\n      }\n\n      export async function getEntry(entryID){\n        var query = 'xquery version \"3.1\"; declare default element namespace \"http://www.tei-c.org/ns/1.0\"; declare namespace tei=\"http://www.tei-c.org/ns/1.0\"; for $coll in collection(\"/db/SRO\") for $hit in $coll//tei:div[@type=\"entry\"] where $hit/@xml:id = \"'+entryID+'\" return $hit';\n        console.log(query);\n\n        return new Promise( function (Resolve,Reject){\n\n            try{\n              db.query(query,{wrap:\"no\"})\n                  .then(function(result) {\n                      //console.log('xQuery result:', result);\n                      Resolve(result)\n                    })\n\n            } catch (error){\n               Reject (\"Something failed in the ExistDB Module: \"+error)\n            }\n\n          });\n\n        }\n\n      export async function getAllEntriesPaged(page,limit,orderField, direction){\n        console.log(\"USAMOS ESTE: \"+orderField+\" -- \"+direction)\n\n        var query = 'xquery version \"3.1\"; declare default element namespace \"http://www.tei-c.org/ns/1.0\"; declare namespace tei=\"http://www.tei-c.org/ns/1.0\"; declare namespace array=\"http://www.w3.org/2005/xpath-functions/array\"; let $pageLimit as xs:decimal := '+limit+' let $page as xs:decimal := '+page+' let $allResults := array { for $hit in collection(\"/db/SRO\")//tei:div '\n        +' let $score as xs:float := ft:score($hit) let $currentDate as xs:date := xs:date( if (data($hit//ab[@type=\"metadata\"]/date/@when)) then data($hit//ab[@type=\"metadata\"]/date/@when) else data($hit//ab[@type=\"metadata\"]/date/@notBefore)) let $rawCode as xs:decimal := xs:decimal( replace($hit//@xml:id, \"[^0-9]\", \"\") ) '\n        +' where $hit/@type=\"entry\" '\n\n        if ( orderField ){\n          if( orderField.indexOf(\"date\") > -1 ){\n            query = query + ' order by $currentDate '+direction+' '\n          } else if( orderField.indexOf(\"volume\") > -1 ){\n            query = query + ' order by $rawCode '+direction+' '\n          } else {\n            query = query + ' order by $hit//'+orderField.trim()+' '+direction+' '\n          }\n        } else {\n          query = query + ' order by $score descending '\n        }\n\n        query = query +'return <comp><doc>{$hit}</doc></comp> } let $resultsCount as xs:decimal := array:size($allResults) let $maxpage as xs:double := math-ext:ceil($resultsCount div $pageLimit) let $firstEntry := if ( $page > $maxpage ) then ($maxpage * $pageLimit) - ($pageLimit - 1) else ($page * $pageLimit) - ($pageLimit - 1) let $offset := if ( ($firstEntry + $pageLimit) > $resultsCount ) then ($firstEntry + $pageLimit) - $resultsCount else 0 let $pagesToReturn := if ( $pageLimit - $offset < 1) then 1 else $pageLimit - $offset return <results> <paging> <current>{$page}</current> <last>{$maxpage}</last> <returned>{$pagesToReturn}</returned> <total>{$resultsCount}</total> </paging> <entries> { for $hita in array:flatten(array:subarray($allResults, $firstEntry, $pagesToReturn)) let $hit := $hita/doc return <entry> <docid>{data($hit//@xml:id)}</docid> <date>{ if (data($hit//ab[@type=\"metadata\"]/date/@when)) then data($hit//ab[@type=\"metadata\"]/date/@when) else data($hit//ab[@type=\"metadata\"]/date/@notBefore) }</date> <people>{ for $pers in $hit//persName return <person> <role>{data($pers/@role)}</role> <name> <title> {normalize-space($pers/text()[last()])} </title> <forename>{$pers/forename/text()}</forename> <surname>{$pers/surname/text()}</surname> </name> </person> } </people> {$hit} </entry> } </entries> </results>';\n\n\n        console.log(query);\n\n        return new Promise( function (Resolve,Reject){\n\n            try{\n              db.query(query,{wrap:\"no\"})\n                  .then(function(result) {\n                      //console.log('xQuery result:', result);\n                      Resolve(result)\n                    }).catch(function (rejected){\n                      console.log(rejected)\n                    })\n\n            } catch (error){\n               Reject (\"Something failed in the ExistDB Module: \"+error)\n            }\n\n          });\n        }\n\n\n\n// USAGE EXAMPLE OF THE EASY-EXIST MODULE\n\n// PUT a document\n// db.put('/my-collection/my-document', body)\n//\n//     // Get the body of a document\n//     .then(function() {\n//         return db.get('/my-collection/my-document');\n//     })\n//     .then(function(doc) {\n//         console.log('Document Body:', doc);\n//     })\n//\n//     // Execute xQuery\n//     .then(function() {\n//         return db.query('collection(\"my-collection\")/message/body');\n//     })\n//     .then(function(result) {\n//         console.log('xQuery result:', result);\n//     })\n//\n//     // Delete document\n//     .then(function() {\n//         return db.delete('/my-collection/my-document');\n//     })\n//     .then(function() {\n//         console.log('Document Deleted');\n//     });\n//\n\n//WASUsPS\n"]}