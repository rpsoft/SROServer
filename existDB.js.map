{"version":3,"sources":["existDB.js"],"names":["query","Resolve","Reject","db","wrap","then","result","error","textSearch","getAllEntriesOrdered","executeStoredQuery","getAllPeople","getAllEntries","page","limit","console","log","getAllEntriesPaged","exist","require","DB","username","password"],"mappings":"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","file":"existDB.js","sourcesContent":["var exist = require('easy-exist');\n\nimport {EDB_LOGIN} from \"./config\"\n\n// connect\nvar db = new exist.DB('http://localhost:8080', {\n    username: EDB_LOGIN.username,\n    password: EDB_LOGIN.password,\n});\n\n\nexport async function textSearch(query){\n\n    var query = 'xquery version \"3.1\";'\n                  +'declare default element namespace \"http://www.tei-c.org/ns/1.0\";'\n                  +'declare namespace tei=\"http://www.tei-c.org/ns/1.0\";'\n                  +'<entries>'\n                  +'{'\n                  +'for $hit in collection(\"/db/SRO\")//tei:div[ft:query(., \"'+query+'\")]'\n                  +'let $score as xs:float := ft:score($hit) where $hit/@type=\"entry\" order by $score descending return <entry> <docid>{data($hit/@xml:id)}</docid> <score>{data($score)}</score> <date>{data($hit//date)}</date> <stationers>{ for $stat in $hit//persName where $stat/@role=\"stationer\" return <name> {string-join( ($stat/forename,$stat/surname), \", \")} </name> } </stationers> <doc>{ for $item in $hit/p return <item>{fn:string-join($item//text(),\" \")}</item> }</doc> </entry> } </entries>'\n    //console.log(query);\n    return new Promise( function (Resolve,Reject){\n\n        try{\n          db.query(query,{wrap:\"no\"})\n              .then(function(result) {\n                  //console.log('xQuery result:', result);\n                  Resolve(result)\n                })\n\n        } catch (error){\n           Reject (\"Something failed in the ExistDB Module: \"+error)\n        }\n\n      });\n\n  }\n\n  export async function getAllEntriesOrdered(){\n\n      var query = 'xquery version \"3.0\";'+\n                  'declare default element namespace \"http://www.tei-c.org/ns/1.0\";'+\n                  'declare namespace tei=\"http://www.tei-c.org/ns/1.0\";'+\n                  '<entries>'+\n                  '{'+\n                  ' for $hit in collection(\"/db/SRO\")//tei:div[@type=\"entry\"]'+\n                  'let $score as xs:float := ft:score($hit) where $hit/@type=\"entry\" order by $score descending return <entry> <docid>{data($hit/@xml:id)}</docid> <score>{data($score)}</score> <date>{data($hit//date)}</date> <stationers>{ for $stat in $hit//persName where $stat/@role=\"stationer\" return <name> {string-join( ($stat/forename,$stat/surname), \", \")} </name> } </stationers> <doc>{ for $item in $hit/p return <item>{fn:string-join($item//text(),\" \")}</item> }</doc> </entry> } </entries>'\n\n      return new Promise( function (Resolve,Reject){\n\n          try{\n            db.query(query,{wrap:\"no\"})\n                .then(function(result) {\n                    //console.log('xQuery result:', result);\n                    Resolve(result)\n                  })\n\n          } catch (error){\n             Reject (\"Something failed in the ExistDB Module: \"+error)\n          }\n\n        });\n\n    }\n\n\n    export async function getAllPeople(){\n\n        return new Promise( function (Resolve,Reject){\n            try{\n              db.executeStoredQuery(\"/QS/allPeople.xq\")\n                  .then(function(result) {\n                      //console.log('xQuery result:', result);\n                      Resolve(result)\n                    })\n\n            } catch (error){\n               Reject (\"Something failed in the ExistDB Module: \"+error)\n            }\n          });\n      }\n\n    export async function getAllEntries(){\n\n        return new Promise( function (Resolve,Reject){\n            try{\n              db.executeStoredQuery(\"/QS/allEntries.xq\")\n                  .then(function(result) {\n                      Resolve(result)\n                    })\n\n            } catch (error){\n               Reject (\"Something failed in the ExistDB Module: \"+error)\n            }\n\n          });\n\n      }\n      export async function getAllEntriesPaged(page,limit){\n\n        var query = 'xquery version \"3.1\"; declare default element namespace \"http://www.tei-c.org/ns/1.0\"; declare namespace tei=\"http://www.tei-c.org/ns/1.0\"; declare namespace array=\"http://www.w3.org/2005/xpath-functions/array\"; let $pageLimit as xs:decimal := '+limit+' let $page as xs:decimal := '+page+' let $allResults := array { for $coll in collection(\"/db/SRO/docs\") let $hits := $coll//tei:div[@type=\"entry\"] return $hits} let $resultsCount as xs:decimal := array:size($allResults) let $maxpage as xs:double := math-ext:ceil($resultsCount div $pageLimit) let $firstEntry := if ( $page > $maxpage ) then ($maxpage * $pageLimit) - ($pageLimit - 1) else ($page * $pageLimit) - ($pageLimit - 1) let $offset := if ( ($firstEntry + $pageLimit) > $resultsCount ) then ($firstEntry + $pageLimit) - $resultsCount else 0 let $pagesToReturn := $pageLimit - $offset return <results> <paging> <current>{$page}</current> <last>{$maxpage}</last> <returned>{$pagesToReturn}</returned> <total>{$resultsCount}</total> </paging> <entries> { for $hit in array:flatten(array:subarray($allResults, $firstEntry, $pagesToReturn)) return <entry> <docid>{data($hit/@xml:id)}</docid> <date>{data($hit//date/@notBefore)}</date> <people>{ for $pers in $hit//persName return <person> <role>{data($pers/@role)}</role> <name> <title> {normalize-space($pers/text()[last()])} </title> <forename>{$pers/forename/text()}</forename> <surname>{$pers/surname/text()}</surname> </name> </person> } </people> <items>{ for $item in $hit/p return <item> { $item } </item> }</items> </entry> } </entries> </results>'\n        console.log(query);\n\n        return new Promise( function (Resolve,Reject){\n\n            try{\n              db.query(query,{wrap:\"no\"})\n                  .then(function(result) {\n                      //console.log('xQuery result:', result);\n                      Resolve(result)\n                    })\n\n            } catch (error){\n               Reject (\"Something failed in the ExistDB Module: \"+error)\n            }\n\n          });\n        }\n\n\n\n// USAGE EXAMPLE OF THE EASY-EXIST MODULE\n\n// PUT a document\n// db.put('/my-collection/my-document', body)\n//\n//     // Get the body of a document\n//     .then(function() {\n//         return db.get('/my-collection/my-document');\n//     })\n//     .then(function(doc) {\n//         console.log('Document Body:', doc);\n//     })\n//\n//     // Execute xQuery\n//     .then(function() {\n//         return db.query('collection(\"my-collection\")/message/body');\n//     })\n//     .then(function(result) {\n//         console.log('xQuery result:', result);\n//     })\n//\n//     // Delete document\n//     .then(function() {\n//         return db.delete('/my-collection/my-document');\n//     })\n//     .then(function() {\n//         console.log('Document Deleted');\n//     });\n//\n"]}